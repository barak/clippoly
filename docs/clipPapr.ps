%!PS-Adobe-2.0
%%Creator: dvipsk 5.58c Copyright 1986, 1994 Radical Eye Software
%%Title: clip.dvi
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSCommandLine: dvips clip.dvi
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1995.08.03:1644
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (clip.dvi)
@start /Fa 39 119 df<EA03C0EA07F0120F121F13F8A313F0EA07B0EA003013701360
A213E013C01201EA038013005A120E5A5A5A5A5A0D197A8819>44
D<387FFFF8A2B5FCA214F0150579941E>I<120EEA3F80127F12FFA31300127E123C0909
778819>I<EC03F8EC1FFEEC7C1F9138F80780D901E013C0903903C003E0EB0780010F13
01D91F0013F0A2133E137E017C130313FCA2485AA2000314075BA2120716E049130F120F
A34848EB1FC0A44848EB3F80A448C7EA7F00A3157E007E14FEA25D00FE13015DA248495A
A25D007C13075D4A5AA24AC7FC6C133E5C6C5B380F83E03807FF80C648C8FC243A77B72A
>48 D<15181538157815F0140114031407EC0FE0141F147FEB03FF90383FEFC0148FEB1C
1F13001580A2143FA21500A25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25C
A2130FA25CA2131FA25CA2133FA291C7FC497EB61280A31D3877B72A>I<16E0ED01F015
03A3150716E0A3150F16C0A2151F1680A2ED3F00A3157EA2157C15FC5D14015D14035D14
075D140F5D141F92C7FC143EA25CECF81C153E903801F07EEB03E014C090380780FE130F
49485A133EEB7C01137801F05BEA01E03803C003EA0FFE391FFFC3F04813FB267C01FF13
403AF0003FFFE000601307C71400EC0FE05DA3141F5DA3143F92C7FCA4143E141C24487D
B72A>52 D<D9707C130ED9F3FE131E496C133C48B5133816784815F0EC0F019039FC0703
E03A07F00307C001E0138F3A0FC001FF80497E48C7EA0F00001E5C48141E153E48143C15
7C485C5A4A5AC7FC4A5AA24A5A140FA24A5AA24AC7FCA25C147E14FE5C1301A25C1303A2
495AA3130F5CA2131F5CA2133FA25C137FA391C8FC137E133C273A74B72A>55
D<EC01FCEC0FFF023F13C091387E07E0903901F803F0903803E001D907C013F890380F80
00A249C7FCA2133EA21501017E14F0A21503017F14E0ED07C09138800F809138C01F0090
383FF03E6E5A90381FFCF0ECFFE06D138013036D7F497F90380F7FF890383E3FFCEB781F
48486C7E3803E0073907C001FF48487E001F8090C7FC003E80127E127CA200FC143E5AA2
5DA25DA24A5A6C495A007C495A007E495A6C013FC7FC381F80FE380FFFF8000313E0C66C
C8FC253A78B72A>I<EC01FCEC0FFF023F138091387E07C0903901F803E0EB03F0903907
E001F0EB0FC0EB1F80013F14F814005B137E13FEA2485AA2150312035BA2ED07F012075B
150FA216E00003141FA2153FED7FC0120115FF6C6C5A90397803BF8090383C0F3FD91FFC
1300903807F07F90C7FC157E15FE5D14015D4A5AA2003E495A007F495A5D4AC7FC00FE5B
48137E007013F8387803F0387C0FE0383FFF806C48C8FCEA03F8253A78B72A>I<133C13
7E13FF5AA313FE13FCEA00701300B2120EEA3F80127F12FFA31300127E123C102477A319
>I<EE01C01603A21607160FA2161F83163FA2167F16FF16EF150116CFED038FA2ED070F
A2150E151E151C1538A203707FA2EDE007A2EC01C014031580EC0700A2140EA25CA25C02
7FB5FCA291B6FC9139E00007F849481303A2495A130791C7FC5B130E5BA25B1378137013
F0EA03F8486C4A7EB56C48B512F0A3343C7BBB3E>65 D<DB03FE130E92393FFF801E92B5
EAE03C913903FE01F0913A0FF000787CDA3FC0EB3CFC4AC7EA1FF802FE140FEB03FC4948
1407494815F049481403495A5C49C813E05B485A5B000317C0485AA2485A1880485A94C7
FCA2485AA3127F5BA312FF90CBFCA41738A217784816707E17F06C5E16015F16036C6C4A
5A94C7FC001F150E6D141E000F5D6D5C6C6C495A6C6CEB03C0D801FEEB0F8027007F807E
C8FC6DB45A010F13E0010090C9FC373D74BA3B>67 D<0103B612FEEFFFC018F0903B0007
F8000FF84BEB03FCEF00FE020F157FF03F804B141F19C0021F150F19E05D1807143F19F0
5DA2147FA292C8FCA25C180F5CA2130119E04A151FA2130319C04A153FA201071780187F
4A1600A2010F16FEA24A4A5A60011F15034D5A4A5D4D5A013F4B5A173F4A4AC7FC17FC01
7FEC03F84C5A91C7EA1FC04949B45A007F90B548C8FCB712F016803C397CB83F>I<DB03
FE130E92393FFF801E92B5EAE03C913903FE01F0913A0FF000787CDA3FC0EB3CFC4AC7EA
1FF802FE140FEB03FC49481407494815F049481403495A5C49C813E05B485A5B000317C0
485AA2485A1880485A94C7FCA2485AA3127F5BA312FF90CBFC0307B512E0A392390007FC
00705A16075FA36C150F5FA36C6C141FA2001F5E6D143F6C7E167F6C6C4A5A6C6CEB03EF
D801FEEB07C73A007FC03F0790273FFFFC03C7FC010F01F0C8FC01001380373D74BA40>
71 D<0103B5D8F80FB512E0A390260007F8C7381FE0004B5DA2020F153F615DA2021F15
7F96C7FC5DA2023F5D605DA2027F14016092C7FCA24A1403605CA249B7FC60A202FCC712
070103150F605CA20107151F605CA2010F153F605CA2011F157F95C8FC5CA2013F5D5F5C
A2017F14015F91C7FC491403007FD9FE01B512F8B55BA243397CB83E>I<0103B512F8A3
90390007F8005DA2140FA25DA2141FA25DA2143FA25DA2147FA292C7FCA25CA25CA21301
A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA291C8FC497E
B6FCA25C25397CB820>I<902607FFF8923807FFF0614F13E0D9000FEFF0004F5AA2021F
167FF1EFC0141DDA1CFCEC01CF023C16DF9538039F800238ED071FA20278ED0E3F97C7FC
0270151CA202F04B5AF0707E14E0037E14E0010117FE4D485A02C0EC0380A20103ED0701
610280140EA20107ED1C0305385B14006F137049160705E05B010EEC01C0A2011E913803
800F61011CEC0700A2013C020E131F4C5C1338ED1FB80178163F04F091C8FC01705CA201
F04A5B187E00015DD807F816FEB500C09039007FFFFC151E150E4C397AB84A>77
D<0107B612F817FF1880903B000FF0003FE04BEB0FF0EF03F8141FEF01FC5DA2023F15FE
A25DA2147FEF03FC92C7FCA24A15F817074A15F0EF0FE01301EF1FC04AEC3F80EFFE0001
034A5AEE0FF091B612C04CC7FCD907F8C9FCA25CA2130FA25CA2131FA25CA2133FA25CA2
137FA291CAFCA25BA25B1201B512FCA337397BB838>80 D<0103B612F017FEEFFF80903B
0007F8003FC04BEB0FF01707020FEC03F8EF01FC5DA2021F15FEA25DA2143FEF03FC5DA2
027FEC07F818F092C7120F18E04AEC1FC0EF3F004A14FEEE01F80101EC0FE091B6128004
FCC7FC9138FC003F0103EC0F80834A6D7E8301071403A25C83010F14075F5CA2011F140F
A25CA2133F161F4AECE007A2017F160F180E91C7FC49020F131C007F01FE153CB5913807
F078040313F0CAEAFFE0EF3F80383B7CB83D>82 D<92383FC00E913901FFF01C020713FC
91391FC07E3C91393F001F7C027CEB0FF84A130749481303495A4948EB01F0A2495AA201
1F15E091C7FCA34915C0A36E90C7FCA2806D7E14FCECFF806D13F015FE6D6D7E6D14E001
0080023F7F14079138007FFC150F15031501A21500A2167C120EA3001E15FC5EA3003E4A
5AA24B5AA2007F4A5A4B5A6D49C7FC6D133ED8F9F013FC39F8FC03F839F07FFFE0D8E01F
138026C003FCC8FC2F3D7ABA2F>I<0007B812E0A25AD9F800EB001F01C049EB07C0485A
D900011403121E001C5C003C17801403123800785C00701607140700F01700485CA2140F
C792C7FC5DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25C
A21307A25CA2130FA25CEB3FF0007FB512F8B6FCA2333971B83B>I<14F8EB07FE90381F
871C90383E03FE137CEBF801120148486C5A485A120FEBC001001F5CA2EA3F801403007F
5C1300A21407485C5AA2140F5D48ECC1C0A2141F15831680143F1587007C017F1300ECFF
076C485B9038038F8E391F0F079E3907FE03FC3901F000F0222677A42A>97
D<147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F0031207
13E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0
007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426>99
D<ED01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680A2153FA202F813
00EB07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B120FEBC001121F
5DEA3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15C3ED8380143F15
87007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0253B77
B92A>I<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913
F8001F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530
007C14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690
C7FC1D2677A426>I<ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0
F0160014075DA4140F5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA4
14FE5CA413015CA413035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE
3C137C1378EAF8F01278EA3FC0EA0F80264C82BA19>I<EC07C0EC3FF09138FC38E09039
01F01FF0EB03E0903807C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C01201
151F1203491480A2153F1207491400A25DA249137EA215FEA25D00031301140314076C6C
485A0000131FEB787BEB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00
FE49C7FC147E5C387801F8387C07E0381FFF80D803FEC8FC24367CA426>I<EB03F0EA01
FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B90387E07F0EC1FFCEC783E9038FF
E01F02C01380EC800F1400485A16C05B49EB1F8012035BA2153F000715005BA25D000F14
7E5B15FE5D121FD98001131C15F8163C003F01031338010013F0A216704814E0007E15F0
16E0EDE1C000FE903801E38048903800FF000038143C263B7BB92A>I<EB01C0EB07E014
F0130F14E01307EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEA
F07E12E013FEC65AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB
83801303EB0700A2130E6C5AEA07F8EA01E0143879B619>I<D801E001FEEB07F03C07F8
03FF801FFC3C0E3C0F07C0783E3C1E3E3C03E1E01F261C1F78D9F3C013803C383FF001F7
800F02E01400007801C013FE007018C002805B4A4848EB1F80EAF07FD8E07E5CA2000002
07143F01FE1700495CA2030F5C0001177E495C18FE031F5C120349DA8001131C18F8033F
153C00070403133849020013F0A24B1570000F17E049017E15F019E003FEECE1C0001FEE
01E34949903800FF000007C70038143C3E2679A444>109 D<D801E013FE3A07F803FF80
3A0E3C0F07C03A1E3E3C03E0261C1F787F39383FF00114E0007813C000708114804A485A
EAF07FEAE07EA20000140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316
070007027F130049137EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA
0780292679A42F>I<147F903803FFC090380FC1F090381F00F8017E137C5B4848137E48
48133E0007143F5B120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC
03F8A2EC07F015E0140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FF
C0C648C7FC202677A42A>I<9039078007C090391FE03FF090393CF0787C903938F8E03E
9038787FC00170497EECFF00D9F0FE148013E05CEA01E113C15CA2D80003143FA25CA201
07147FA24A1400A2010F5C5E5C4B5A131F5EEC80035E013F495A6E485A5E6E48C7FC017F
133EEC70FC90387E3FF0EC0F8001FEC9FCA25BA21201A25BA21203A25B1207B512C0A329
3580A42A>I<ECF803903807FE0790381F871F90383E03BF017C13FEEBF80112013803F0
00484813FC120F5B001F130115F8EA3F80A2007F1303010013F0A34813074814E0A3140F
4814C0A3141F1580143FA2007C137FECFF006C5AEB03BF381F0F7F3807FE7EEA01F0C7FC
14FE5CA313015CA313035C130748B512C0A3203577A426>I<3903C003F0390FF01FFC39
1E783C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7
FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E21
2679A423>I<14FE903807FF8090380F83C090383E00E04913F00178137001F813F00001
130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C01300
143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB45A
D801FEC7FC1C267AA422>I<EB0380EB07C0130FA4131F1480A3133F1400A35B137E007F
B5FCA2B6FC3800FC00A312015BA312035BA312075BA3120F5BA3121FEB801CA2143C003F
1338EB0078147014F014E0EB01C0EA3E03381F0780380F0F00EA07FCEA01F0183579B31C
>I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C0038140F131F007815C012
70013F131F00F0130000E015805BD8007E133FA201FE14005B5D120149137EA215FE1203
49EBFC0EA20201131E161C15F813E0163CD9F003133814070001ECF07091381EF8F03A00
F83C78E090393FF03FC090390FC00F00272679A42D>I<01F0130ED803FC133FD8071EEB
7F80EA0E1F121C123C0038143F49131F0070140FA25BD8F07E140000E08013FEC6485B15
0E12015B151E0003141C5BA2153C000714385B5DA35DA24A5A140300035C6D48C7FC0001
130E3800F83CEB7FF8EB0FC0212679A426>I E /Fb 5 123 df<EB0FE0EB3FF8EBF81C38
01E00E3803803E0007137EEA0F00001E137C123E003C1300127CA25AA45AA31404140C00
78131814306C13E0381E07C0380FFF00EA03F8171B7C991E>99 D<133EEA07FEA2EA007C
A213FCA25BA21201A25BA2120314FCEBE3FF9038EF0780D807FC13C0EBF00313E0A2EA0F
C014071380A2121FEC0F801300A248EB1F00A2003E1406143E127EEC7C0C127C151800FC
EB3C30157048EB1FE00070EB0F801F297CA727>104 D<90387C03C03901FF0FF0390707
9C30390E03B078000CEBF0F8001813E1123015F0396007C0E015001200A2495AA449C7FC
15301238007C1460EAFC3E15C0EAF87E39F06F03803970C70700383F83FE381F01F81D1B
7D9926>120 D<EA03E0486C1370D80C7813F8EA187C0030EB01F0A2126013F800C0EB03
E0A2EA01F0A2EC07C0EA03E0A33907C00F80A4EC1F00A25C00035B3801E0FE3800FFBEEB
3F3E13005C121E003F5B5C387E01E0383C03C038300780D81C1FC7FCEA0FFCEA07F01D26
7D9922>I<013E13C0137F9038FF818048EBC3004813FF380701FE3806000C00045BC75A
5C5CEB03800106C7FC5B5B5B5B9038C00180EA038039060003005C380FF81E381FFFFE38
383FFC38601FF86D5A38C007C01A1B7D9920>I E /Fc 35 121 df<B61280A819087F96
20>45 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630
>49 D<EB0FFC90387FFFC048B512F0000714FC390FF03FFF261F800F1380263F000313C0
5AD9C00113E0486C6C13F07FA2ED7FF8A46C5A6C5A000FC7FCC8FCEDFFF0A216E05C16C0
4A138016004A5A5D4A5A4A5A4A5AEC7F8092C7FC14FEEB01F849481378495A495A495A01
3EC712F84914F05B4848130148B6FCA25A5A5A5A4815E0B7FCA425377BB630>I<EB03FF
011F13F0017F13FC3901FC07FF2603F003138048486C13C0496C13E0EA0FF001FC14F012
1F7FA56C4814E0A23803F001C714C04A138016004A5A4A5AEC3FF090380FFFC092C7FC15
F090380007FE913801FF806E13C016E0ED7FF016F816FC153FA216FEEA1FC0487E487E48
7EA416FCA249EB7FF8127F01C0EBFFF06C4814E06C6C4813C0260FFC0713806CB6120000
0114FC6C6C13F0010790C7FC27387CB630>I<ED07C0150FA2151F153F157F15FFA25C5C
5C5CA2141E5C147C5C5C495A495A1307495A5C131E5B137C5B5B485A485A1207485A90C7
FC121E5A127C5AB81280A4C70001EBC000AA0103B61280A429377DB630>I<001C15C0D8
1F80130701F8137F90B61280A216005D5D15F05D15804AC7FC14F090C9FCA8EB07FE9038
3FFFE090B512F89038FC07FC9038E003FFD98001138090C713C0120EC813E0157F16F0A2
16F8A21206EA3F80EA7FE012FF7FA44914F0A26C4813FF90C713E0007C15C06C5B6C4913
80D9C0071300390FF01FFE6CB512F8000114E06C6C1380D90FF8C7FC25387BB630>I<EA
0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F80C7FCABEA0F80EA3FE0EA7FF0A2
EAFFF8A5EA7FF0A2EA3FE0EA0F800D2579A41B>58 D<ED03E04B7EA24B7EA34B7EA24B7E
A34B7EA292B57EA34A8015F302038015E1A202078015C0020F80ED807FA2021F80ED003F
4A80023E131FA2027E80027C7F02FC814A7FA20101824A7F49B77EA3498202C0C7FC010F
824A147FA2011F8291C8123F4982013E151FA2017E82017C8101FE83B500F80107B61280
A4413A7DB948>65 D<B912C0A43A007FF800039338007FE0171F170F1707A21703A21701
A318F0EE7800A41800A216F8A21501150791B5FCA4ECF80715011500A21678A693C8FCAD
B7FCA434397DB83C>70 D<B612FCA439007FF800B3B3ADB612FCA41E397DB824>73
D<B500F80403B512F06E5EA26E5ED8007FF1E000A2D97BFF161EA201796D5DA201786D5D
A26E6C5DA36E6C4A5AA26E6C4A5AA26E6C4A5AA26E6C4A5AA26E6C141EA36E6D5BA26E6D
5BA26F6C5BA26F6C485AA36F6C485AA26F6C485AA26F6C48C7FCA2923803FF1EA36F13BC
A26F13F8A2705AA2705AA213FCB500FC6D4848B612F0A2EE0F80EE070054397DB85B>77
D<EDFFF8020FEBFF80027F14F0903A01FFC01FFC010790380007FFD91FFC010113C0D93F
F06D6C7E49486E7E49486E7E48496E7E48834890C86C7EA248486F1380A248486F13C0A2
003F18E0A348486F13F0A400FF18F8AC007F18F06D5DA3003F18E0A26D5D001F18C0A26C
6C4B13806C18006E5C6C6D4A5A6C5F6C6D4A5A6D6C4A5AD93FFC49485A6DB401075B0107
D9C01F90C7FC010190B512FC6D6C14F0020F1480020001F8C8FC3D3B7BB948>79
D<B8FC17F017FEEFFF8028007FF8000F13C0040113E07013F0EF7FF8EF3FFCA2EF1FFEA2
18FFA818FEA2EF3FFCA2EF7FF8EFFFF04C13E0040F13C091B7120017FC17E002F8C9FCB3
A4B612FCA438397DB841>I<D907FF130E013FEBE01E90B5EAF83E0003ECFE7E3A07FC01
FFFE390FF0001F4848130F48481303491301007F140090C8FC167E5A163EA27F161E7F7F
6D91C7FC13FC387FFFE014FEECFFF06C14FE6F7E6C816C15F06C816C81C681133F010F80
1301D9000F1480EC007F030F13C01503818100F0157FA3163FA27E17807E167F6C16007E
6D14FE01E0495A01F813039039FF801FF800FC90B512E0D8F83F5CD8F00749C7FC39E000
7FF02A3B7BB935>83 D<003FB91280A4D9F800EBF003D87FC09238007FC049161F007EC7
150FA2007C1707A200781703A400F818E0481701A4C892C7FCB3AE010FB7FCA43B387DB7
42>I<B600FC011FB512C0A426007FF8C8381FC000725AB3B3181F013F94C7FC8060011F
163E6D6C157E187C6D6C15FC6D6D495A6D6DEB07F06D01F0EB1FE0DA7FFEEBFFC0021FB6
C8FC02075C020014F0030F1380423A7DB849>I<EB3FFE0003B512E0000F14F8391FF00F
FE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901
FFF87F00071380380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC
1FBFFFC0390FFFFE1F0003EBF80F39003FE0032A257DA42E>97 D<13FFB5FCA412077EAF
4AB47E020F13F0023F13FC9138FE03FFDAF00013804AEB7FC00280EB3FE091C713F0EE1F
F8A217FC160FA217FEAA17FCA3EE1FF8A217F06E133F6EEB7FE06E14C0903AFDF001FF80
903AF8FC07FE009039F03FFFF8D9E00F13E0D9C00390C7FC2F3A7EB935>I<EE7F80ED7F
FFA4150381AF903801FF81010F13F1013F13FD9038FFC07F0003EB001FD807FC1307000F
8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C5B000F5C6C6C5B6C6C4913C027
01FF80FD13FE39007FFFF9011F13E1010313012F3A7DB935>100
D<903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C0001FEC
1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678121F
6C6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC010113E025
257DA42C>I<EC1FF0903801FFFC010713FF90391FF87F8090383FE0FFD9FFC113C0A248
1381A24813016E1380A2ED3E0092C7FCA8B6FCA4000390C8FCB3ABB512FEA4223A7DB91D
>I<161FD907FEEBFFC090387FFFE348B6EAEFE02607FE07138F260FF801131F48486C13
8F003F15CF4990387FC7C0EEC000007F81A6003F5DA26D13FF001F5D6C6C4890C7FC3907
FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E123F7F6C7E90B512F8EDFF8016E0
6C15F86C816C815A001F81393FC0000F48C8138048157F5A163FA36C157F6C16006D5C6C
6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C91C7FC010713F02B377DA530>I<
13FFB5FCA412077EAFED7FC0913803FFF8020F13FE91381F03FFDA3C01138014784A7E4A
14C05CA25CA291C7FCB3A3B5D8FC3F13FFA4303A7DB935>I<EA01F0EA07FC487EA2487E
A56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B512F8A4153B7DBA1B>I<13FFB5
FCA412077EAF92380FFFE0A4923803FC0016F0ED0FE0ED1F804BC7FC157E5DEC03F8EC07
E04A5A141FEC7FE04A7E8181A2ECCFFEEC0FFF496C7F806E7F6E7F82157F6F7E6F7E8215
0F82B5D8F83F13F8A42D3A7EB932>107 D<13FFB5FCA412077EB3B3ACB512FCA4163A7D
B91B>I<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F8190
3983F03FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A
5CA291C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF903803FF
F8020F13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3
B5D8FC3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003F
E048486D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F
5D6D1307001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC0101
13C029257DA430>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000075B6C
6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114
D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E
7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE
140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F81400
38E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7
FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>
I<01FFEC3FC0B5EB3FFFA4000714016C80B3A35DA25DA26C5C6E4813E06CD9C03E13FF90
387FFFFC011F13F00103138030257DA435>I<B500F1B538803FFFA43D07FE000FF80003
E06C6C010715C082028015076C6E6C148015076C01C0ED0F00826E485C017FED801E5D90
273FF01E7F5B17C0DAF83E147C011F90393C3FE078037C14F8903B0FFC781FF0F0A29139
FEF00FF10107EDF9E002FF14FB6D496CB45AA24B7E6D5EA26D496C90C7FCA292C7FC6E5C
A2023E147C023C143C40257EA445>119 D<B539F01FFFF0A4000390398003F8006C01C0
13E06C1407D97FE05B6D6C485A6E48C7FC90381FFC3E010F5B903807FEFC6D6C5A5D6D5B
6D5B6E7E6E7E814A7EA24A7E903801F3FFD903E37FD907C17FEB0FC049486C7E4A6C7E01
3E80496D7E49130F00016E7EB590383FFFF8A42D257EA432>I E
/Fd 7 111 df<007FB81280B912C0A26C17803204799641>0 D<0060150600F8150F6C15
1F007E153F6C157E6C6C14FC6C6CEB01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F
80017EEB3F006D137E6D6C5A90380FC1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA2
4A7E497F903803F7E0903807E3F090380FC1F890381F80FC90383F007E017E7F49EB1F80
4848EB0FC04848EB07E04848EB03F04848EB01F84848EB00FC48C8127E007E153F48151F
48150F00601506282874A841>2 D<EB0FE0EB7FFC497E0003EBFF804814C04814E04814
F04814F8A24814FCA3B612FEA86C14FCA36C14F8A26C14F06C14E06C14C06C1480C6EBFE
006D5AEB0FE01F207BA42A>15 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0
EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01
FF9238007FC0EE1FF0EE07FCEE01FF9338007FC0171F177F933801FF80933807FC00EE1F
F0EE7FC04B48C7FCED07FCED1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07
FCEB1FF0EB7FC04848CAFCEA07FCEA1FF0EA7FC048CBFC12FC1270CCFCAD007FB81280B9
12C0A26C1780324279B441>21 D<EC7FF80103B5FC011F14E0017F14F89039FFC00FFC3A
03FE0001FFD807F09038003F80D80FC0EC0FC04848EC07E048C8EA03F0003E150148ED00
F8A248167CA248163CB3B2006016182E347CB137>92 D<126012F0B3B3B3B3A912600453
77BD17>106 D<126012F07EA21278127CA2123C123EA2121E121FA27E7FA212077FA212
037FA212017FA212007FA21378137CA2133C133EA2131E131FA27F80A2130780A26D7EA2
130180A2130080A21478147CA2143C143EA2141E141FA2801580A2140715C0A2140315E0
A2140115F0A2140015F8A21578157CA2153C153EA2151E150C1F537BBD2A>110
D E /Fe 13 123 df<013FB612E090B712F05A120717E0270F807006C7FC391E00600E48
140C003813E04813C048141CEAC0011200148001035BA213071400A25B1578011E137CA3
133E133C137C157E13FC5B1201157F1203497FA3D801C0131C2C257EA32F>25
D<1503A35DA21506A2150EA2150CA2151CA21518A21538A21530A21570A2EC07FE91383F
FFC0903901FCE3F0903907E0E0F890391F80C03ED93E007FEB7C01D801F8EC0F80D803F0
018013C0D807E014071403D80FC015E0D81F801300A248485AA2007E1306A2020E130F12
FE48010C14C0A2021CEB1F80A20218EB3F00A20238137E007C5D1430007E4A5A003E9038
7003F06CEC07C09138600F80D80F80013FC7FC3903E0E0FC3901F8E7F039007FFF80D90F
FCC8FCEB01C0A25CA21303A291C9FCA25BA21306A2130EA2130CA22B4B7CB931>30
D<150C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A2158014
0FA215005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA2
91C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA2
90C8FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A>61
D<1760177017F01601A21603A21607160FA24C7EA216331673166316C3A2ED0183A2ED03
03150683150C160115181530A21560A215C014011580DA03007FA202061300140E140C5C
021FB5FC5CA20260C7FC5C83495A8349C8FC1306A25BA25B13385B01F01680487E000716
FFB56C013F13FF5EA2383C7DBB3E>65 D<0103B77E4916F018FC903B0007F80003FE4BEB
00FFF07F80020FED3FC0181F4B15E0A2141FA25DA2143F19C04B143F1980027F157F1900
92C812FE4D5A4A4A5AEF0FF04AEC1FC005FFC7FC49B612FC5F02FCC7B4FCEF3FC00103ED
0FE0717E5C717E1307844A1401A2130F17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D5A
017F4BC7FC4C5A91C7EA07FC49EC3FF0B812C094C8FC16F83B397DB83F>I<4BB4FC031F
13F09238FE01FC913903F0007EDA07C0EB1F80DA1F80EB0FC0023EC7EA07E002FCEC03F0
495A4948EC01F8495A4948EC00FC495A49C912FE49167E13FE49167F1201485AA2485AA2
120F5B001F17FFA2485AA34848ED01FEA400FFEE03FC90C9FCA2EF07F8A2EF0FF0A218E0
171F18C0EF3F806C167F180017FE4C5A6C6C5D1603001F4B5A6D4A5A000FED1F806C6C4A
C7FC6D147E0003EC01F8D801FC495AD8007EEB0FC090263F807FC8FC903807FFF8010013
80383D7CBA3F>79 D<147E903803FF8090390FC1C38090391F00EFC0017E137F49133F48
5A4848EB1F8012075B000F143F48481400A2485A5D007F147E90C7FCA215FE485C5AA214
015D48150CA21403EDF01C16181407007C1538007E010F1330003E131F027B13706C01E1
13E03A0F83C0F9C03A03FF007F80D800FCEB1F0026267DA42C>97
D<133FEA1FFFA3C67E137EA313FE5BA312015BA312035BA31207EBE0FCEBE3FF9038E707
C0390FFE03E09038F801F001F013F8EBE000485A15FC5BA2123F90C7FCA214015A127EA2
140312FE4814F8A2140715F05AEC0FE0A215C0EC1F80143F00781400007C137E5C383C01
F86C485A380F07C06CB4C7FCEA01FC1E3B7CB924>I<14E0EB03F8A21307A314F0EB01C0
90C7FCAB13F8EA03FEEA070F000E1380121C121812381230EA701F1260133F00E0130012
C05BEA007EA213FE5B1201A25B12035BA20007131813E01438000F133013C01470EB8060
14E014C01381EB838038078700EA03FEEA00F815397EB71D>105
D<D803E0017F14FE3D07F801FFE003FFC03D0E3C0781F00F03E03D1C3E1E00F83C01F026
383F38D9FC707F00304914E04A90387DC000007049EB7F8000604991C7FCA200E090C700
FE1301485A017E5CA200000201140301FE5F495CA203031407000160495C180F03075D12
03494A011F13601980030F023F13E00007F000C0495C1901031F023E1380000F1803494A
150061033F150E001FEF1E1C4991C7EA0FF80007C7000EEC03E043267EA449>109
D<D803E0137F3A07F801FFE03A0E3C0781F03A1C3E1E00F826383F387F00305B4A137C00
705B00605BA200E090C712FC485A137EA20000140101FE5C5BA2150300015D5B15075E12
0349010F133016C0031F13700007ED80605B17E0EE00C0000F15014915801603EE070000
1FEC0F0E49EB07FC0007C7EA01F02C267EA432>I<14FF010313C090380F80F090383E00
380178131C153C4913FC0001130113E0A33903F000F06D13007F3801FFE014FC14FF6C14
806D13C0011F13E013039038003FF014071403001E1301127FA24814E0A348EB03C012F8
00E0EB07800070EB0F006C133E001E13F83807FFE0000190C7FC1E267CA427>115
D<D901E01360D90FF813E0496C13C090383FFE0190397FFF038090B5EA07009038F81FFF
3901E003FE9038C0001C495B5DC85A4A5A4A5A4AC7FC140E5C5C14F0495AEB038049C8FC
130E5B4913035B495B484813064848130E48C75AD80FFC137C391FFF81F8381E0FFFD838
075B486C5B00605CD8E00190C7FC38C0007C23267DA427>122 D
E /Ff 38 122 df<157815FC14031407141F14FF130F0007B5FCB6FCA2147F13F0EAF800
C7FCB3B3B3A6007FB712FEA52F4E76CD43>49 D<EC3FFE0103B512E0010F14FC013F14FF
90B712C048D9C07F7F2703FE000F13F8D807F801037FD80FE06D7F48486D7F48488001F0
1680486C6E13C07F486C6E13E07FA27013F0A56C5AA26C5AEA0FF0EA03C0C914E05EA218
C05E1880A24C13005F4C5A4B5B5F4B5B5F4B5B4B90C7FC4B5A5E4B5AED7FE04B5A4A5B4A
48C8FC4A5A5D4A48EB01F04A5AEC3F804AC7FC02FEEC03E0495A495A495A495AD91F8014
0749C8FC013E150F017FB7FC90B812C05A5A5A5A5A5A5AB9FC1880A4344E79CD43>I<91
380FFFC091B512FC0107ECFF80011F15E090263FF8077F9026FF800113FC4848C76C7ED8
03F86E7E491680D807FC8048B416C080486D15E0A4805CA36C17C06C5B6C90C75AD801FC
1680C9FC4C13005FA24C5A4B5B4B5B4B13C04B5BDBFFFEC7FC91B512F816E016FCEEFF80
DA000713E0030113F89238007FFE707E7013807013C018E07013F0A218F8A27013FCA218
FEA2EA03E0EA0FF8487E487E487EB57EA318FCA25E18F891C7FC6C17F0495C6C4816E001
F04A13C06C484A1380D80FF84A13006CB44A5A6CD9F0075BC690B612F06D5D011F158001
0302FCC7FCD9001F1380374F7ACD43>I<177C17FEA2160116031607160FA2161F163F16
7FA216FF5D5DA25D5DED1FBFED3F3F153E157C15FCEC01F815F0EC03E01407EC0FC01580
EC1F005C147E147C5C1301495A495A5C495A131F49C7FC133E5B13FC485A5B485A120748
5A485A90C8FC123E127E5ABA12C0A5C96C48C7FCAF020FB712C0A53A4F7CCE43>I<D803
80150ED807E0157E01FEEC03FED9FFF0137F91B65A5F5F5F5F5F94C7FC5E5E16F016C093
C8FC15F801E190C9FC01E0CAFCABEC0FFF027F13F001E3B512FE01E76E7E9026FFF8077F
DAC0017F49C713F8496E7E49143F4981496E7E6C481680C9FC18C08218E0A418F0A3EA0F
E0487E487E487E487EA418E0A35B6C484A13C05B491680003EC85A003F17006C6C4A5A6D
5D6C6C4A5AD807F8495BD803FE01075B2701FFC03F5B6C90B65A013F4AC7FC6D14F80103
14C09026007FF8C8FC344F79CD43>I<ED0FFF92B512E0020780021F14FC91397FFE03FE
903A01FFF0007F4901C0EB3F804990C7121F4948EC7FC0494814FF49484913E049485B01
FF5C485BA2485B5AA2486F13C04A6D1380486F1300177E94C7FC5AA291CAFC5AA2150891
3801FFF8020713FFB54814C04A14F04AC66C7E023C6D7E4A6D7E4A6D7E7013804A15C0A2
4A15E07013F05C18F8A491C714FCA37EA67EA46C17F880A27E18F06C5D18E06C6D15C07E
6E4913806C6D15006D6C495A6D6CEB7FFC6DB448485A6D90B55A010315C0010092C7FC02
3F13FC020713C0364F7ACD43>I<121F7F7FEBFF8091B81280A45A1900606060A2606060
485F0180C86CC7FC007EC95A4C5A007C4B5A5F4C5A160F4C5A484B5A4C5A94C8FC16FEC8
12014B5A5E4B5A150F4B5AA24B5AA24B5A15FFA24A90C9FCA25C5D1407A2140FA25D141F
A2143FA4147F5DA314FFA55BAC6D5BA2EC3FC06E5A395279D043>I<913807FFC0027F13
FC0103B67E010F15E090261FFC0113F8903A3FE0003FFCD97F80EB0FFE49C76C7E484880
48486E1380000717C04980120F18E0177FA2121F7FA27F7F6E14FF02E015C014F802FE49
13806C7FDBC00313009238F007FE6C02F85B9238FE1FF86C9138FFBFF06CEDFFE017806C
4BC7FC6D806D81010F15E06D81010115FC010781011F81491680EBFFE748018115C048D9
007F14E04848011F14F048487F48481303030014F8484880161F4848020713FC16018248
48157F173FA2171FA2170FA218F8A27F007F17F06D151FA26C6CED3FE0001F17C06D157F
6C6CEDFF806C6C6C010313006C01E0EB0FFE6C01FCEBFFFC6C6CB612F06D5D010F158001
0102FCC7FCD9000F13C0364F7ACD43>I<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA3
4C7FA24C7FA34C8083047F80167E8304FE804C7E03018116F8830303814C7E03078116E0
83030F814C7E031F81168083033F8293C77E4B82157E8403FE824B800201835D84020383
4B800207835D844AB87EA24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185
A24A820103854A82010785A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B54
7BD366>65 D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8
EA803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC4948
48C9FC4901F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B
481A3FA24849181FA3485B1B0FA25AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA2
1B0F6C6D1980A26C1A1F6C7F1C006C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C
5A6D6D4C5A6D01FC4C5A6D6DEE7F806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF802
03903AFFE001FFF0020091B612C0033F93C8FC030715FCDB007F14E0040101FCC9FC5254
79D261>67 D<BC1280A5D8000701F8C7000114C0F0001F19071901851A7F1A3F1A1FA2F2
0FE0A21A07A31A03A318F81BF01A01A497C7FC1701A317031707170F177F92B6FCA59238
F8007F170F170717031701A317001B3EA31B7CA395C8FCA21BFCA21BF8A21A01A31A031B
F01A071A0FA21A1F1A3FF27FE0F101FF1907191F0603B5FCBCFCA21BC0A34F517CD058>
69 D<BB12FEA5D8000701F8C700077FF0007F191F190785858586861B80A21A1FA31A0F
A41BC006F81307A497C7FCA31701A317031707170F177F92B6FCA59238F8007F170F1707
17031701A31700A795C9FCB3B812F8A54A517CD055>I<B812C0A5D8000701F8C7FCB3B3
B3B2B812C0A52A527CD132>73 D<B812F8A5D8000701F8CAFCB3B3A91A7CA41AFC1AF8A5
1901A31903A219071AF0190FA2191F193F197F19FF180360183F4DB5FCBB12E0A546527C
D151>76 D<B912F0F0FF8019F819FF1AC0D8000701F0C714F0060F7F060113FE727F737F
737F85737F87A2737FA387A863A2616363A24F5B4F5B4F90C8FC4F5A06035B060F13F095
B512C092B8C9FC19F819E019F89226F0000313FE9439007FFF80727F727F727F727F727F
8684A28684A787A71D1C75133EA38575137E73157C7513FC731401B86C6D9038F803F807
039038FE07F07390B512E0736C14C0080F1400CEEA7FFC5F537CD164>82
D<003FBC1280A59126C0003F9038C0007F49C71607D87FF8060113C001E08449197F4919
3F90C8171FA2007E1A0FA3007C1A07A500FC1BE0481A03A6C994C7FCB3B3AC91B912F0A5
53517BD05E>84 D<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F048
6C6D7F6EEB3FFC48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020F
B6FC91B7FC01071487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A
5BA2485AA45EA26D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C
9026F81FC014F06C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641
>97 D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEBFFC092B612F002F301
017F913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A824A6E7FA2727EA285
A28584A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B6F495BDACFC04990C7
FCDA87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01FCC8FC90C7000313C0
41547BD24B>I<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE
0001FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F130070
5A4892C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C
6DEC3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49
C7FC020113E033387CB63C>I<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13
FC91B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F48
4980485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D
5C6C6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE
0FD9003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C0
4901817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C048
8191C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06C
EE01F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB
03FE903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<ED3F
FC0203B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800FFFC49
5A495AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3B3A700
7FB512FEA52E547CD329>I<DA3FFF14FF0103B5D8F00713C0010FDAFC1F13E0013FECFF
7F90267FFC0F9038FF9FF09026FFE001EBF83F48496C13E0484990387FF01F4890C7D83F
F813E0489338FC0FC0F0078048486E6CC7FCA2003F82A9001F5EA26C6C4A5AA26C5E6C6D
495A6C6D495A6C6D485BDAFC0F5B4890B6C8FCD803EF14FC01C314F02607C03F90C9FC91
CBFCA2120FA37FA213F813FE90B7FC6C16F817FF18C06C836C836C836D828448B9FC1207
4848C700031480D81FF8EC003F4848150748486F13C083485A83A56D5D007F18806D5D00
3F18006C6C4B5AD80FFEED1FFC6C6C6CEC7FF86C01E049485A6C01FE011F5B6C6CB71280
010F03FCC7FC010115E0D9000F01FCC8FC3C4F7CB543>I<EB3FF0B5FCA51203C6FCB3A4
EE1FFC93B512C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDAF1E081
ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>I<137F
497E000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017E
B3B3A6B612E0A51B547BD325>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339003FFE
00EF1FF0EF3FC04D5A4DC7FCEE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED0FF8ED
1FE04B7E4B7EECF1FF02F37F02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E6F7F6F
7F83707E82707F84707F707F82707F84707F177F717E4D13C0B6D8F003B6FCA540537CD2
47>107 D<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>I<D93FF0D91FFCEDFF
E0B591B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A
3F001FFE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3
C0159EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03F
B512FEA567367BB570>I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE07FFC92
393F001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3
ACB6D8F807B612C0A542367BB54B>I<913801FFE0021F13FE91B612C0010315F0010F90
38807FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48834890
C86C7EA24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5DA26C5F
A26C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF
807FFC6D90B55A010015C0023F91C8FC020113E03A387CB643>I<903A3FF001FFE0B501
0F13FE033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D
7F92C76C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FFA2615F
616E4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F
1480031F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B>I<90397FE003FEB59038
0FFF80033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3E013FEC6ECC07FECE78014
EF150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB537>
114 D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF81307D81FE0130148487F
4980127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13FF15F86C14FF16C06C15
F06C816C816C81C681013F1580010F15C01300020714E0EC003F030713F015010078EC00
7F00F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01FE90
39FFC00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C387CB635>I<143EA6147E
A414FEA21301A313031307A2130F131F133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3
A9EE07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B
020313802A4D7ECB34>I<D93FF8913801FFC0B50207B5FCA50003ED001FC61607B3AE5F
A35FA2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EBFFC0903A0FFFC03F836D90
B51203010114FE6D6C13F8020701E091C7FC42377BB54B>I<B6D8E07FB5D8C003B512C0
A5000101F0C701F0C7381FF8006E027FED07E06C715DA26E023F150F017F705DA26E181F
013F4B6C92C7FC6E606D70143E94B5FC6F177E6D4A6E137C03C001F315FC6D715B160303
E001E114016D020702E05B03F013C06D71485A160F03F8D9807F13076D05F85B93381F00
3F03FC160F027F4902FC5BDBFE3E011F131F023F04FE90C8FC167EDBFF7C010F5B6E01FC
ECFF3E4C6D137E6E5FA24C7F6E5F4C7F6E5FA24C7F6E5F4C147FA26E5F93C8123F6F5EA2
033E6FC9FC5A367DB461>119 D<007FB500F090387FFFFEA5C66C48C7000F90C7FC6D6C
EC07F86D6D5C6D6D495A6D4B5A6F495A6D6D91C8FC6D6D137E6D6D5B91387FFE014C5A6E
6C485A6EEB8FE06EEBCFC06EEBFF806E91C9FCA26E5B6E5B6F7E6F7EA26F7F834B7F4B7F
92B5FCDA01FD7F03F87F4A486C7E4A486C7E020F7FDA1FC0804A486C7F4A486C7F02FE6D
7F4A6D7F495A49486D7F01076F7E49486E7E49486E7FEBFFF0B500FE49B612C0A542357E
B447>I<B600F00107B5FCA5C601F8C8EA7FE06EED3F00A26D6C153E187E013F167C6E15
FC6D5E6F13016D5E6F13036D5E8117076D6D5C170F6D6D5C171F6D93C7FC6F5B027F143E
6F137E023F147C6F13FCA26E6D5A16816EEBC1F016C36E5C16E76E5C16FF6E5CA26E91C8
FCA36F5AA26F5AA26F5AA26F5AA26F5AA35E150F5E151F93C9FC5DD81FC0133E486C137E
486C137C486C13FC5D14015D14034A5A6C48485A49485A263FC07FCAFCEB81FE6CB45A6C
13F000035BC690CBFC404D7DB447>I E /Fg 73 124 df<DA0FF813FC91397FFF07FF90
3B01F807DF83C0903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B9338F0
07804848010790C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFFE0B512
F0A3333B7FBA30>11 D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E09038
3F0007017E497EA25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA
486C497E267FFFE0B512C0A32A3B7FBA2E>I<146014E0EB01C0EB0380EB0700130E131E
5B5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA312
1EA2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E014
60135278BD20>40 D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C
133E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA213
3E133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<1530
1578B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817>I<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C09097988
17>I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA2
48C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D
5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7D
B72A>48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C38
79B72A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E1230
00706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F
4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B4913034848140048
5A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF4913C03901
F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D
4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A2
16C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C49
5A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A>I<1538A2
157815F8A2140114031407A2140F141F141B14331473146314C313011483EB0303130713
06130C131C131813301370136013C01201EA038013005A120E120C5A123812305A12E0B7
12F8A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780133C9038F0
03F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E0
07E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C
12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38
007FFCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790
387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F
90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA24914
8016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B
6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<12301238123E003F
B612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5DC712014A5A
92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA513
7FA96DC8FC131E233B7BB82A>I<EB03F8EB1FFF017F13C09038FC07F03901E001F84848
6C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01FC13
3C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F07F39
03E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F0078EC0FE0
00F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C131ED807E013
7C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A>I<EB03F8EB1FFF017F13C090
38FC07E03903F803F048486C7E48486C7E49137E121F48487FA2007F158090C7FCA248EC
1FC0A616E0A56C143FA27F123F001F147FA26C6C13FF6C6C13DF000313013901F0039F39
00FC0F1FD93FFC13C0EB07F090C7FC153F1680A316005D000F147E487E486C5BA24A5A4A
5A49485A6C48485A001C495A260F807FC7FC3807FFFC000113F038003FC0233A7DB72A>
I<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317>
I<007FB812F8B912FCA3CCFCAEB912FCA36C17F836167B9F41>61
D<EC03FF021F13E09138FC00FCD901E0131ED90780EB0780011EC7EA01E00138EC007049
81498148488148488190C97E48D901FC1480000ED907FFEB01C0000C90391F03C000001C
90267E00E013E000184901701360263801F86D13700030496D13300103EC0FE0267007E0
0107133800601718495AA200E0171C484848150CAA6C6C7E1260A26D6C151C0070171826
3003F0130F0101141F00386D013F1338261800FC01771330001C017E9038E3F070000C90
261F03C113E0000E903A07FF00FFC06CD901FCEB3F006C90CAFC7F6C7E6C7E13706D167C
011EED03FCD90780EC1FF0D901E0ECFF80D900FC90383FFC00021FB51280020301E0C7FC
363C7BBA41>64 D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C
1FA2021C7FEC180FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249
C77F167FA20106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E070
7E1201486C81D80FFC02071380B56C90B512FEA3373C7DBB3E>I<B712E016FC16FF0001
903980007FC06C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5A
EEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A7
188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B>I<
913A01FF800180020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F
4948EB01DFD93F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A248
5A1703123F5B007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E
5F6C7E17066C6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB
0F80902701FF803FC7FC9039007FFFFC020F13F002011380313D7BBA3C>I<B712C016F8
16FE000190398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F
18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017
FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>I<B812FCA30001
903880000F6C90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A2
1503150F91B5FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A2
1707A2170F173F177F486D903807FF00B9FCA333397DB839>I<B812F8A3000190388000
1F6C90C71201EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507
151F91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>I<DB
FF8013C0020FEBF001023F13FC9139FF803F03903A03FC000787D90FF0EB03CF4948EB00
EF4948147F4948143F49C8121F485A4848150F48481507A248481503A2485A1701123F5B
007F1600A448481600AB93B6FCA26C7E9338007FE0EF3FC0A2123F7F121FA26C7EA26C7E
A26C7E6C7E6C6C157F6D7E6D6C14FF6D6C14EFD90FF8EB03C7D903FEEB0783903A00FFC0
3F0191393FFFFC00020F01F0130002001380383D7CBA41>I<B648B512FEA30001902680
000313006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E
>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<013FB512E0A3903900
1FFC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B0070131F6C5C6C495A6C
49C7FC380781FC3801FFF038007F80233B7DB82B>I<B649B5FCA3000101809038007FF0
6C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4CC8FC160E5E5E5E5E4B5AED0780030E
C9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A6C7E14704A6C7E4A6C7E14804A6C7E
6F7EA26F7F707EA2707E707EA2707EA2707E707EA2707E707F8484486D497FB6011FEBFF
80A339397DB841>I<B612E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A3
17F0A216011603160FEE1FE0486D13FFB8FCA32D397DB834>I<B5933807FFF86E5DA200
01F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183
A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13
C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A
487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>I<B5913807FFFE8080
C69238007FE06EEC1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E
7EA26E7E6E7E81140F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FC
ED03FEA2ED01FF6F1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A217
7E486C153E487ED80FFC151EB500C0140EA2170637397DB83E>I<EC03FF021F13E09138
FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E
7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8
491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717
806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D9
03F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA41>I<B712C016F816FE
000190398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2
EE03FCA2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA3
30397DB839>I<B612FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707E
A2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED
03F8ED00FE82707E707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C
5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D>82 D<D90FF813C090383FFE0190
B512813903F807E33907E000F74848137F4848133F48C7121F003E140F007E1407A2007C
140312FC1501A36C1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C
14FEC680013F1480010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C014
03A21501A37EA216F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0
FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB00
1F273E0001FE130348EE01F00078160000701770A300601730A400E01738481718A4C716
00B3B0913807FF80011FB612E0A335397DB83C>I<B6903807FFFEA3000101809038007F
E06C90C8EA1F80EF0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D
6C5C6D6C495A6D6CEB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F8037
3B7DB83E>I<B500FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E
1403017F93C7FCA280013F1506A26E140E011F150C80010F5DA28001075DA26E14700103
1560A26D6C5CA2806D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C
020F1318A26E6C5AA215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3
393B7EB83E>I<B5D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8
EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280
011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300F
A26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C115
0EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA2
02035E4B140FA202015E4B1407A2020093C8FC4B80503B7EB855>I<007FB590383FFFFC
A3C601F801071380D97FE0D903FCC7FC013FEC01F06D6C5C5F6D6C5C6D6C13034CC8FC6D
6C1306160E6D6C5B6DEB8018163891387FC0306E6C5A16E06E6C5A91380FF18015FB6EB4
C9FC5D14036E7EA26E7F6F7EA24B7E15DF9138019FF09138038FF8150F91380607FC9138
0E03FE140C4A6C7EEC38000230804A6D7E14E04A6D7E49486D7E130391C76C7E01066E7E
130E010C6E7E011C1401013C8101FE822607FF80010713E0B500E0013FEBFF80A339397E
B83E>I<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D5378BD17>91
D<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D537FBD17>93 D<EB1FE0EBFFFC3803E03F39
07000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EB
FE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980
063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97
D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001
FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14
F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC028
3B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC0
03A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F14
0E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277D
A525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0
007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C
131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813
C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380F
C0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14
037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80
903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213
FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<
ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E0
10000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38
060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048
C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB
0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3
120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25B
A35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380
C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0F
F8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A2
14E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F012FFA3120F1203B1
913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EB
F3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486C
EB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3AD487EB512C0A312
3A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F8380
3F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A348
6C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3FFCECF03F90
39F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280
A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C48487F48487F
4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14
076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090
381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E9039F3801F
803A07F7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3
ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FF
F8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE0190387E0781
9038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7FCA312FEAA
127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE
0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7FC09038E1E3
E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512
F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807E
A27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB
0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A27
7DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215
C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E0
00FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7
FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFEA33A0FF800
0FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2
EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA214
7CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E0
18C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2
D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360A2D907E66D
5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37
257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D
6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7
E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D7E486C80000FEC
3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000FF06C48EB07C00003
EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C
5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA
7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB5
12FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F15
0014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A485A0007140E5B
4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA325>I<B81280A2
290280962A>I E /Fh 31 122 df<B612F8A91D097F9A25>45 D<EA07C0EA1FF0EA3FF8
EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F788E1F>I<EC03C01407141F147FEB
03FF133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F
6D7E90B612E0000315F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C04880
01C015E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13
804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814
FE495A494814F8D907E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A
5AB8FC17C0A42D417BC038>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB
3FFED807E06D7E81D80FF86D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E
4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEE
FF80816F13C017E0A26F13F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A
494913C05BD83F80491380D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F
49C7FC010113E02D427BC038>I<121E121F13FC90B712FEA45A17FC17F817F017E017C0
A2481680007EC8EA3F00007C157E5E00785D15014B5A00F84A5A484A5A5E151FC848C7FC
157E5DA24A5A14035D14074A5AA2141F5D143FA2147F5D14FFA25BA35B92C8FCA35BA55B
AA6D5A6D5A6D5A2F447AC238>55 D<EC7FF00103B5FC010F14C0013F14F090397F801FFC
3A01FC0003FE48486D7E497F4848EC7F80163F484815C0A2001F151FA27FA27F7F01FE14
3F6D158002C0137F02F014006C01FC5B6E485A6C9038FF83FCEDE7F86CECFFE06C5D6C92
C7FC6D14C06D80010F14F882013F8090B7FC48013F14802607FC0F14C0260FF80314E048
48C6FC496D13F0003F141F48481307496D13F8150000FF157F90C8123F161F160FA21607
A36D15F0127F160F6D15E06C6C141F6DEC3FC06C6CEC7F80D80FFE903801FF003A07FFC0
0FFE6C90B55AC615F0013F14C0010F91C7FC010013F02D427BC038>I<DCFFF01470031F
01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0
EC0FFF4901C0804990C87E4948814948814948167F4849163F4849161F5A4A160F485B19
074890CAFC19035A5BA2007F1801A34994C7FC12FFAE127F7F1AF0A2123FA27F6C18011A
E06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D
4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001FF80023F90B6C7FC020715FC020115
F0DA001F1480030001F8C8FC44467AC451>67 D<B7D88003B612FEA526003FFEC9EBF800
B3A791B9FCA54AC9FCB3AAB7D88003B612FEA54F447CC358>72 D<903801FFE0011F13FE
017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5A
EA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0000F1380381FFE
00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F00
07EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97 D<EB7FC0B5FCA512037EB1
ED0FF892B57E02C314E002CF14F89139DFC03FFC9139FF000FFE02FCEB03FF4A6D13804A
15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A2177F18F0A3EFFFE06E15C06E5B6E
491380027C491300496C495A903AFC1FC07FFC496CB512F0D9F00314C049C691C7FCC8EA
1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF
0003495A48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C
7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007F
FC03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32>I<EE03FEED07FFA5ED00
1F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC0014890388000
7F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141F
A26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F01
0713F89026007FC0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF8
3FF89039FFC007FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A212
7F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C
6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114
C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E0027F13F049B512F849EB8FFC9039
0FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5
C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFFE0137E010F9039FE03FF80013FEB
FF8F90B812C048D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF
0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07F
F04890B55A1680D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF80
17E06C826C16FC7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177F
A46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612
C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>I<EB7FC0B5FCA512037EB1ED07FE
92383FFF8092B512E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D
7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<137C48B4FC4813804813C0A24813
E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA51846
7CC520>I<EB7FC0B5FCA512037EB293387FFFE0A593380FE0004C5A4CC7FC167E5EED03
F8ED07E04B5A4B5A037FC8FC15FEECC1FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F
02C07FEC807F6F7E826F7E816F7F836F7F816F7F83707E163FB60003B512F8A535457DC4
3B>107 D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>I<90277F8007FEEC0F
FCB590263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF891
3D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D
7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB590
383FFF8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC
02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0
011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F
001F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F00
0F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C0
9026001FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E02C314E002CF14F89139DFC0
3FFC9139FF001FFE000301FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4
EF3FFCACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC0
7FFC02CFB512F002C314C002C091C7FCED1FF092C9FCADB67EA536407DAC3E>I<90387F
807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED
0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E>114
D<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C7121F127E00FE
140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C15
806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15C06C141FA2
6DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C
>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4C6
01E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F006DB5FC6D
13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C81
B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F1407010313FE
9026007FF0EBFC00372E7CAC3E>I<B5D8FE1FB539801FFFF0A500019027C0003FE0C7EA
7C007114786E17F86C6F6C5C6E1601017F6E6C5CA26E011F1403013F6F5C6E013F140701
1F6F5CA26E0179140F010F048090C7FC6E01F95C6D02F0EBC01E15806D902681E07F5B18
E003C3157C6D9139C03FF07815E76DDA801F5B18F803FF14F96E9039000FFDE018FF6E48
6D5BA36E486D5BA26E486D90C8FCA24B7F02075DA26E48147C4B143C4C2C7EAB51>119
D<B500FE90383FFFF0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E5B6D6C13
7E6DEB807C6D6D5A6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F6E7FA24A
7F4A7F8291381F3FFCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02C08049486C7F
49C76C7E013E6E7E017E141FB500E090B512FCA5362C7EAB3B>I<B6903803FFFCA50001
01E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D
5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD02
1F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303D83F
805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B000790CA
FCEA01FC36407EAB3B>I E /Fi 34 122 df<143014F013011303131F13FFB5FC13E713
071200B3B3B0497E497E007FB6FCA3204278C131>49 D<000615C0D807C0130701FCEB7F
8090B612005D5D5D15E0158026063FFCC7FC90C9FCAE14FF010713C090381F01F0903838
00FC01F0137ED807C07F49EB1F8016C090C7120F000615E0C8EA07F0A316F81503A216FC
A5123E127F487EA416F890C712075A006015F0A20070140F003015E00038EC1FC07E001E
EC3F806CEC7F006C6C13FE6C6C485A3901F807F039007FFFE0011F90C7FCEB07F826447B
C131>53 D<121CA2EA1F8090B712C0A3481680A217005E0038C8120C0030151C00705D00
60153016705E5E4814014B5A4BC7FCC81206150E5D151815385D156015E04A5AA24A5A14
0792C8FC5CA25C141E143EA2147E147CA214FCA21301A3495AA41307A6130FAA6D5AEB01
C02A457BC231>55 D<14FF010713E0011F13F890387F80FC9038FC007E48487F4848EB1F
804848EB0FC0000FEC07E0485AED03F0485A16F8007F140190C713FCA25AA216FE1500A5
16FFA46C5CA36C7E5D121F7F000F5C6C6C1306150E6C6C5B6C6C5BD8007C5B90383F01E0
90390FFF80FE903801FE0090C8FC150116FCA4ED03F8A216F0D80F801307486C14E0486C
130F16C0ED1F80A249EB3F0049137E001EC75A001C495A000F495A3907E01FE06CB51280
C649C7FCEB1FF028447CC131>57 D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FF
A203707FED607FA203E07FEDC03FA2020180ED801FA2DA03007F160FA20206801607A24A
6D7EA34A6D7EA34A6D7EA20270810260147FA202E08191B7FCA249820280C7121FA249C8
7F170FA20106821707A2496F7EA3496F7EA3496F7EA201788313F8486C83D80FFF03037F
B500E0027FEBFFC0A342477DC649>65 D<DB0FFE146092B500C013E0020314F0913A0FFC
01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F49
48153F4948151F49C9120F485A491607120348481603A248481601A248481600A2123FA2
491760127FA31900485AAE6C7EA21960A2123F7FA2001F18E07F000F18C0A26C6C160119
806C6C160312016DEE07006C6C16066D6C150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5A
D900FFEC0780DA3FC0011FC7FCDA0FFC13FC0203B512F0020014C0DB0FFEC8FC3B487BC5
46>67 D<B912F8A3000101C0C7127F6C6C48EC07FC17011700187C183C181CA284A31806
A4180704067FA395C7FCA4160EA2161E163E16FE91B5FCA3EC8000163E161E160EA21606
A319C0A3F0018093C7FCA41803A21900A260A260A2181EA2183E187EEF01FE170748486C
147FB95AA33A447CC342>69 D<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191
393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F49
48151F49C9120F485A491607120348481603A248481601A248481600A2123FA249176012
7FA396C7FC485AAD4CB612C06C7EA293C7387FF000725A003F171F7FA2121F7F120FA26C
7EA26C7E6C7EA26C7E6D7E6D6C153F6D7E6D6C157F6D6C15E7D903FEEC01C7D900FFEC03
83DA3FE0EB0F01DA0FFCEBFE000203B500F81360020002E090C7FCDB0FFEC9FC42487BC5
4D>71 D<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB612F0A31C447DC323>73
D<010FB512FEA3D9000313806E130080B3B3AB123F487E487EA44A5A13801300006C495A
00705C6C13076C5C6C495A6CEB1F802603E07FC7FC3800FFFCEB1FE027467BC332>I<B6
00C049B512C0A3000101E0C8387FFC006C49ED3FE06D481680063EC7FC183C183860604D
5A4D5A4DC8FC171E17385F5F4C5A4C5A4CC9FC160E5E5E5E5E4B5A4B7E4B7E150F4B7E4B
7E1577EDE3FE913881C1FFEC8381DA87007F028E6D7E149C02B86D7E02F06D7E14C04A6D
7E707EA2707E707EA2707F717EA2717E717EA2717E717EA2717E717EA2717F8585496C82
486D4A13FCB600C0011FEBFFE0A343447CC34C>I<B56C933807FFFC6E5EA20001F1FE00
26006FE0EE1BF8A3D967F01633A2D963F81663A3D961FC16C3A3D960FEED0183A2027FED
0303A36E6C1406A36E6C140CA26E6C1418A36E6C1430A36E6C1460A26E6C14C0A36E6CEB
0180A3037FEB0300A292383F8006A36F6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26F
B45AA370C7FC13F0A2486C143ED80FFFEF0FFEB500F0011C0107B512FCA34E447BC359>
77 D<B56C020FB5FC8080C6040013F06D6CED1F80D96FF8ED0F00A2D967FC1506EB63FE
A2EB61FF01607FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F
7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01
FF701386A2EF7FC6EF3FE6A2EF1FF6EF0FFEA217071703A217011700A201F0167E183E48
7ED80FFF161EB500F0150EA2180640447CC349>I<B712FCEEFFC017F800019039C0000F
FC6C6C48EB01FF9338007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A218FFA718FE
A2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612F017800280
C9FCB3AA3801FFE0B612C0A338447CC342>80 D<B712E016FF17C000019039C0003FF86C
6C48EB03FCEE00FF717E717E717E717E717EA284170384A760A21707604D5AA24D5A4D5A
4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC913980007F80EE0FE0707EEE03FC707E1600
83717EA2717EA784A71A6084171FA21AE0716C13C02601FFE002071301B600C016809438
01FC03943900FE0700CBEA3FFEF007F843467CC348>82 D<49B41303010FEBE007013F13
F89039FE00FE0FD801F8131FD807E0EB079F49EB03DF48486DB4FC48C8FC4881003E8112
7E82127C00FC81A282A37E82A27EA26C6C91C7FC7F7FEA3FF813FE381FFFE06C13FE6CEB
FFE06C14FC6C14FF6C15C0013F14F0010F80010180D9001F7F14019138001FFF03031380
816F13C0167F163F161F17E000C0150FA31607A37EA36C16C0160F7E17806C151F6C1600
6C5D6D147ED8FBC05CD8F9F0495AD8F07C495A90393FC00FE0D8E00FB51280010149C7FC
39C0003FF02B487BC536>I<003FB912F8A3903BF0001FF8001F01806D481303003EC715
0048187C0078183CA20070181CA30060180CA5481806A5C81600B3B3A54B7EED7FFE49B7
7EA33F447DC346>I<EB07FC90383FFF809038F80FE03903C003F048C66C7E000E6D7ED8
0FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90380FFE1FEB3F
C0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F007F14EF6D90
38C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A001FE0007C2B2E
7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C07E091387001
F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE03F8A217FCA2
160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F80D9F380EB7E
00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F467DC436>I<
EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C00003140F4848EB1F
E049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7FA2123F16307F
001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F131E90381FC0
78903807FFF001001380242E7DAC2B>I<167FED3FFFA315018182B3EC7F80903803FFF0
90380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81485AA2485AA2127F
A290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C9038077F806C6C010E
13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467DC436>I<EB01FE90
3807FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15C049130F121F
484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA2123F16306C7E16
70000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E90381F80F890
3803FFE0010090C7FC242E7DAC2B>I<EA01FC12FFA3120712031201B3EC01FE913807FF
C091381E07F091383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A848
6CECFF80B5D8F83F13FEA32F457DC436>104 D<EA01E0EA07F8A2487EA46C5AA2EA01E0
C8FCADEA01FC12FFA3120712031201B3B0487EB512F8A315437DC21C>I<EA01FC12FFA3
120712031201B3B3B3A5487EB512F8A315457DC41C>108 D<D801FC01FFEC1FE000FF01
0701E0EBFFFC913B0F03F801E07F913C3C01FC07803F800007903C7000FE0E001FC00003
49D97E1C130F2601FDC0D97F38804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A848
6C4A6C497EB5D8F81FB50003B512E0A34B2C7DAB52>I<3901FC01FE00FF903807FFC091
381E07F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35B
B3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC9038
3E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C8
7E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D13010007
5D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7D
AC31>I<3901FC03FC00FF90380FFF8091383C07E091387001F83A07FDE000FE00010180
137F01FFEC3F8091C7EA1FC04915E049140F17F0160717F8160317FCA3EE01FEABEE03FC
A3EE07F8A217F0160F6D15E0EE1FC06D143F17806EEB7E00D9FDC05B9039FCF003F89138
3C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<3903F803F000
FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45B
B3A748B4FCB512FEA3202C7DAB26>114 D<90383FE0183901FFFC383907E01F78390F00
03F8001E1301481300007C1478127800F81438A21518A27EA27E6C6C13006C7E13FC383F
FFE06C13FC6C13FF6C14C06C14E0C614F0011F13F81300EC0FFC140300C0EB01FE140015
7E7E153EA27EA36C143C6C147C15786C14F86CEB01F039F38003E039F1F00F8039E07FFE
0038C00FF01F2E7DAC26>I<1306A5130EA4131EA3133E137EA213FE12011207001FB512
F0B6FCA2C648C7FCB3A4150CAA017E131C017F1318A26D133890381F8030ECC070903807
E0E0903801FFC09038007F001E3E7EBC26>I<D801FC147F00FFEC3FFFA3000714010003
80000181B3A85EA35DA212006D5B017E9038077F80017F010E13C06D011C13FE90380FC0
78903803FFF09026007F8013002F2D7DAB36>I<B539F001FFFCA3000790C7EA7FE06C48
EC1F8000011600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E001
0F5CA26D6C485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215
B8EC3FB0A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25C
EAFE01387C0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>121
D E /Fj 17 122 df<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178F
A29338070FFE1707040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80
183FA24B4880181F0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284
A24B82197F03F0824B153FA20201834B151FA202038392B8FCA24A83A292C91207020E83
85A24A8485023C84023882A20278840270177FA202F0844A173FA24948841A1FA2494884
1A0FA249CB7F1A074985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0
A45C657DE463>65 D<EC3FF0903803FFFE010F6D7E90393FC03FE090397E0007F801F86D
7ED801E06D7E48486D7E48486E7E48C86C7E7F01F06E7E487E6D6E7EA3707EA36C5AEA03
E0C9FCA6167FED7FFF020FB5FC91387FF807903801FF80903807FC00EB1FF0EB7FC0495A
D803FEC7FC485A120F5B485A485AA2484817E0A312FF5BA2160FA3161F6D141B007F153B
16736D913971FC01C06C6C14E1001FEC01C1D80FFC903A0780FE03806C6C903A0F00FF07
002701FF807E6DB4FC27007FFFF86D5A011F01E0EB1FF8010190C7EA07E03B417ABF42>
97 D<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FC0923807FFFC031F13FF9239
7F007FC003F8EB0FF0DAC3E06D7EDAC780EB01FC02CFC87E02DE157F02FC6F7E4A824A6F
7E180F4A82727E5C727EA2851801A285A3841A80AD1A0060A461180361A21807616E5E18
0F6E4B5A6E5E02B8153F023C4B5A6E4BC7FC6E4A5A90263E0780495A6E6CEB0FF090263C
01F0495ADA007EEBFF806FB448C8FC0138010F13F890C8138041657DE349>I<4AB47E02
0F13F8023F13FE9139FF007F80D903FCEB07E0D907F0EB01F0D91FE0EB00784948804948
8049C87E48485D4915FF00034B138048485CA2485AA2485AA2003F6F130049EC007C94C7
FC127FA35B12FFAD127F7FA4123F7FA2001FEE01C07F000F16036D168012076C6C15076D
160000015E6C6C151E6D6C5C6D6C5C6D6C5CD90FF8495AD903FCEB07C0903A00FF803F80
91263FFFFEC7FC020F13F80201138032417CBF3A>I<181EEF3FFEEE07FFA4EE000F1703
A21701B3AAEDFF80020F13F8023F13FE9139FF803F81903A03FC0007C14948EB01E1D91F
E0EB00F94948147D4948143D49C8121F4848150F491507120348481503491501120F121F
5BA2123F5B127FA45B12FFAD127F7FA3123FA27F121FA26C6C1503A26C6C150712036D15
0F6C6C151F0000163D137F6D6CECF9FF6D6CEB01F1D90FF0D903C113C06D6CD90F81EBFF
80D901FFEB7F019039007FFFFC021F13E00201010091C7FC41657CE349>I<EC03FE9138
1FFFE091B512F8903901FE03FE903A07F0007F8049486D7ED93FC06D7E49C76C7E496E7E
49140348488148481401000782491400000F8283485A1880123F49153FA2007F17C0A35B
A212FF90B8FCA30180CAFCA9127F7FA3123FA27F121FEF01C06C7E17036C6C1680A26C6C
15070001EE0F006D150E6C6C151E6D6C5C6D6C5C6D6C5CD907F0EB03E0D903FC495A9027
00FF803FC7FC91383FFFFC020F13F00201138032417CBF3A>I<F03F80DA03FC903801FF
E091273FFFC00713F091B539F01FC1F8903B03FC03FC3E03903A07F000FE784948EB7FE0
4948EB3FC04948011FEB01F049C76C6CC7FC01FE6E7EA248486E7EA2000382A249140100
0782AA00035E6D1403A200015EA26C6C4A5AA2017F4A5A6D6C495A6D6C495A496C49C8FC
D937F013FE903973FC03FC0160B512F0D9E03F13C0DA03FCC9FC4848CBFCA57FA27FA27F
6C7E13FF91B512FE6DECFFF06D15FE6D6F7E6D16E084013F16FC01FEC700017FD803F8EC
001FD807E0ED03FF4848030013804848167F003FEF3FC090CA121F127EF00FE012FE4817
07A66C170F007E18C0A2007F171F6C6CEE3F806C6CEE7F00000F177ED807F04B5A6C6C4B
5A6C6C4B5AD8007FED1FC0D93FE0ECFF80D90FFED90FFEC7FC0101B612F0D9003F148002
0101F0C8FC3D5E7DBF42>103 D<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FE0
923803FFFC030F13FFDB3F0013C00378EB1FE04B6D7EDAC1C06D7EDAC3808002C7C71203
02CE81170114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003B612C0A4
42647DE349>I<133C13FF487F487FA66C5B6C90C7FC133C90C8FCB3A2EB03C0EA07FF12
7FA41201EA007FA2133FB3B3AC497E497EB612E0A41B5F7DDE23>I<EB03C0EA07FFB5FC
A41201EA007FA2133FB3B3B3B3AD497E497EB612F0A41C647DE323>108
D<D903C0EB7FE0D807FF903803FFFCB5010F13FFDB3F0013C00378EB1FE04B6D7E0001D9
C1C06D7E27007FC3808002C7C71203D93FCE81170114DC14D802F86E7E5CA35CA35CB3B3
496C4A7F496C4A7FB6D8F003B612C0A4423F7DBE49>110 D<EDFF80020F13F8023F13FE
9139FF007F80D903FCEB1FE0D907F0EB07F0D90FC0EB01F8D93F80EB00FE49C8127F017E
81496F7E48486F7E00038349150700078348486F7EA2001F83491501A2003F83A348486F
7EA400FF1880AC007F1800A26D5DA2003F5FA36C6C4B5AA36C6C4B5A00075FA26C6C4B5A
6C6C4B5AA26C6C4B5A017F4BC7FC6D6C14FE6D6C495AD90FF0EB07F8D903FCEB1FE0D900
FFEB7F806EB5C8FC020F13F8020113C039417CBF42>I<D903C0EB7FC0D807FF903807FF
FCB5011F13FFDB7F0013C003F8EB1FF0DAC3E0EB07F80001D9C7806D7E26007FCFC76C7E
02DE6E7ED93FFC6F7E4A6F7E4A82181F4A82727E5C727EA2727EA3727EA41A8084AC4E13
00A54E5AA2611807A24E5A6E5E181F6E4B5A6E5E187F6E4B5A02DE4A90C7FC02CF4A5ADA
C780495ADAC3C0EB0FF0DAC1F0EB3FE0913AC07E01FF806FB448C8FC030F13F803001380
93CAFCB3A3497E497EB612F0A4415B7DBE49>I<9039078003F8D807FFEB0FFFB5013F13
C092387C0FE0913881F01F9238E03FF00001EB838039007F8700148FEB3F8E029CEB1FE0
EE0FC00298EB030002B890C7FCA214B014F0A25CA55CB3B0497EEBFFF8B612FCA42C3F7C
BE33>114 D<1438A71478A414F8A31301A31303A21307130F131FA2137F13FF1203000F
90B6FCB8FCA3260007F8C8FCB3AE17E0AE6D6CEB01C0A316036D6C148016076D6C14006E
6C5A91383FC01E91381FF07C6EB45A020313E09138007F802B597FD733>116
D<B66C49B512E0A4000101F8C8387FFE0026007FE0ED1FF819E0013F705A61131F6E93C7
FC130F180E6E151E0107161C8001035EA26E157801011670806D5EA26F1301027F5DA26E
6C495AA26F1307021F92C8FCA26E6C130EA26F131E0207141CA26F133C02031438810201
5CA26F13F06E5C168092387F81C0A216C3033F5B16E3DB1FE7C9FCA216FF6F5AA26F5AA3
6F5AA26F5AA36F5A433F7FBD46>118 D<B66C49B512E0A4000101F8C8387FFE0026007F
E0ED1FF819E0013F705A61131F6E93C7FC010F160EA26D6C5DA26E153C01031638A26D6C
5DA26E15F06D5EA26E6C495AA26F1303023F5DA26F1307021F92C8FC6F5B020F140EA26F
131E0207141C6F133C02031438A26F1378020114706F13F06E5CA21681037F5B16C3033F
5BA216E7031F90C9FC16FF6F5AA36F5AA26F5AA36F5AA26F5AA215015E15035EA2150793
CAFC5D150EA2151E151C153CD81F801338487E486C5BA25D14015D49485A383F80074948
CBFC001E133E380FC0FC6CB45A000113E06C6CCCFC435B7FBD46>121
D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4
%%BeginPaperSize: a4
a4
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 495 741 a Fj(An)44 b(edge)g(lab)t(eling)i(approac)l(h)e(to)f
(conca)l(v)l(e)h(p)t(olygon)1604 924 y(clipping)1497
1258 y Fi(Klamer)31 b(Sc)m(h)m(utte)330 1546 y(PREPRINT)i(submitted)e
(7)g(July)g(1995)g(to)g(A)m(CM)h(T)-8 b(ransactions)32
b(on)f(Graphics)330 1955 y Fh(Corresp)s(ondence)330 2202
y Fg(K.)c(Sc)n(h)n(utte)330 2302 y(P)n(attern)f(Recognition)h(Group)330
2401 y(Delft)i(Univ)n(ersit)n(y)d(of)i(T)-7 b(ec)n(hnology)330
2501 y(Loren)n(tzw)n(eg)26 b(1)330 2600 y(2628)g(CJ)h(Delft)330
2700 y(The)h(Netherlands)330 2800 y(e-mail:)36 b
(klamer@ph.tn.tudelft.nl)330 2899 y(phone:)h(+31-15-786054)330
2999 y(telefax:)g(+31-15-626740)330 3365 y Ff(Abstract)330
3641 y Fg(This)k(pap)r(er)g(describ)r(es)g(an)g(algorithm)f(to)h(p)r
(erform)g(clipping)g(of)h(t)n(w)n(o)e(p)r(ossibly)h(conca)n(v)n(e)330
3740 y(p)r(olygons.)55 b(The)33 b(approac)n(h)f(lab)r(els)i(the)g
(edges)f(of)h(the)h(input)f(p)r(olygons.)55 b(This)34
b(lab)r(eling)f(is)330 3840 y(used)39 b(in)g(classifying)f(the)h
(resulting)f(p)r(olygons)g(in)h(the)g(sets)g Fe(A)26
b Fd(\\)g Fe(B)t Fg(,)42 b Fe(A)26 b Fd(n)f Fe(B)44 b
Fg(and)38 b Fe(B)30 b Fd(n)c Fe(A)p Fg(.)330 3939 y(It)36
b(is)f(sho)n(wn)f(that)h(its)h(w)n(orst-case)d(time)i(complexit)n(y)g
(is)g(not)g(w)n(orse)f(than)h(the)h(w)n(orst-case)330
4039 y(complexit)n(y)24 b(of)h(the)f(problem)g(of)h(p)r(olygon)f
(clipping)g(itself.)37 b(Suggestions)23 b(are)g(made)i(ho)n(w)f(the)330
4139 y(a)n(v)n(erage)h(time)j(complexit)n(y)f(can)g(b)r(e)h(impro)n(v)n
(ed.)330 4505 y Ff(1)135 b(In)l(tro)t(duction)330 4780
y Fg(The)20 b(pro)r(cess)g(of)g(clipping)g(t)n(w)n(o)g(p)r(olygons)f
(is)h(needed)h(in)g(applications)e(ranging)g(from)h(all)g(t)n(yp)r(es)
330 4880 y(of)31 b(computer)g(graphics)f(applications)h(to)g(path)h
(planning)f(and)g(image)g(pro)r(cessing[1)n(].)48 b(The)330
4979 y(p)r(olygon)27 b(clipping)h(algorithm)f(describ)r(ed)g(in)i(this)
f(pap)r(er)f(calculates)g(the)i(analytical)d(sets)i(of)330
5079 y(the)f(in)n(tersection)e(and)h(the)g(di\013erence)g(of)g(t)n(w)n
(o)g(input)h(2-D)f(p)r(olygons)f(that)h(ma)n(y)f(b)r(e)i(conca)n(v)n
(e.)330 5272 y(In)e(literature)g(some)f(approac)n(hes)f(to)i(p)r
(olygon)f(clipping)h(are)f(describ)r(ed.)36 b(W)-7 b(eiler)25
b(and)g(A)n(ther-)330 5372 y(ton)k([4,)g(5)o(])h(describ)r(e)e(an)h
(approac)n(h)e(whic)n(h)i(doubles)g(the)g(input)h(p)r(olygons)e(in)h
(an)g(inside)g(and)330 5471 y(an)d(outside)g(con)n(tour.)35
b(In)n(tersection)26 b(p)r(oin)n(ts)g(b)r(et)n(w)n(een)g(the)h(double)f
(con)n(toured)f(p)r(olygons)g(are)330 5571 y(calculated.)40
b(Using)29 b(a)f(giv)n(en)g(set)h(of)g(rules)g(the)g(output)g(p)r
(olygons)f(are)g(created.)40 b(The)29 b(disad-)330 5670
y(v)-5 b(an)n(tage)27 b(of)h(this)g(approac)n(h)e(is)i(that)h(the)f
(set)g(of)g(rules)g(giv)n(en)f(do)r(es)h(not)g(cater)f(for)h(all)f(sp)r
(ecial)1809 5919 y(1)p eop
%%Page: 2 2
2 1 bop 330 390 a Fg(cases)27 b(p)r(ossible.)38 b(Sec)n(hrest)28
b(and)g(Green)n(b)r(erg)f([2)o(])i(describ)r(e)e(an)h(approac)n(h)f
(whic)n(h)h(is)g(based)f(on)330 490 y(horizon)n(tal)e(strips.)37
b(A)27 b(strip)g(is)g(b)r(ounded)g(b)n(y)g(ev)n(en)n(ts)g(suc)n(h)f(as)
h(v)n(ertices)f(and)h(edge)f(crossings.)330 589 y(V)-7
b(atti)22 b([3])f(uses)g(the)h(same)f(notion)g(of)g(strips.)35
b(The)21 b(problem)g(of)g(b)r(oth)h(strip-based)e(approac)n(hes)330
689 y(is)i(that)g(sp)r(ecial)f(cases)g(arise)f(with)j(more)e(then)h
(one)f(ev)n(en)n(t)h(on)f(a)h(strip)f(b)r(ound.)36 b(An)22
b(example)f(of)330 789 y(suc)n(h)28 b(a)f(sp)r(ecial)h(case)g(is)g(a)f
(horizon)n(tal)g(line.)38 b(Sc)n(h)n(utte)29 b([1)o(,)g(app)r(endix)f
(A])g(giv)n(es)f(an)h(algorithm)330 888 y(whic)n(h)h(is)f(based)h(on)f
(lab)r(eling)h(edges.)40 b(The)28 b(algorithm)g(describ)r(ed)h(b)n(y)f
(V)-7 b(atti)30 b(can)e(cop)r(e)h(with)330 988 y(p)r(olygons)34
b(with)i(holes)g(and)f(self-in)n(tersecting)f(p)r(olygons.)60
b(The)36 b(algorithms)e(describ)r(ed)h(b)n(y)330 1088
y(W)-7 b(eiler)28 b(and)h(A)n(therton,)f(and)h(b)n(y)f(Sec)n(hrest)g
(and)g(Green)n(b)r(erg)f(can)h(deal)g(with)h(p)r(olygons)f(with)330
1187 y(holes)f(using)g(a)g(metho)r(d)i(similar)d(to)i(the)g(one)f
(describ)r(ed)g(in)h(section)f(7.2.)330 1376 y(The)j(algorithm)e
(describ)r(ed)i(in)g(this)f(pap)r(er)h(is)f(v)n(ery)g(similar)g(to)g
(the)h(algorithm)f(giv)n(en)f(in)i([1,)330 1476 y(app)r(endix)e(A].)g
(The)g(di\013erence)g(is)f(that)h(the)g(algorithm)f(describ)r(ed)h(in)g
(this)g(pap)r(er)f(can)g(cop)r(e)330 1576 y(with)h(bac)n(kground)e
(holes)h(b)r(et)n(w)n(een)g(the)h(input)h(p)r(olygons.)330
1765 y(Initial)f(constrain)n(ts)e(set)i(to)f(the)h(input)g(p)r(olygons)
f(are:)455 2011 y Fd(\017)41 b Fg(The)27 b(p)r(olygons)g(should)g(not)h
(ha)n(v)n(e)e(holes.)455 2172 y Fd(\017)41 b Fg(The)27
b(p)r(olygons)g(should)g(not)h(b)r(e)g(self-in)n(tersecting.)455
2333 y Fd(\017)41 b Fg(The)27 b(p)r(olygons)g(are)f(clo)r(c)n(kwise)h
(orien)n(ted.)330 2578 y(In)37 b(section)g(7)f(is)h(sho)n(wn)f(ho)n(w)h
(the)g(algorithm)f(can)g(b)r(e)i(augmen)n(ted)e(to)h(circum)n(v)n(en)n
(t)f(these)330 2678 y(constrain)n(ts.)330 3040 y Ff(2)135
b(The)44 b(basic)h(algorithm)855 4673 y @beginspecial
0 @llx 0 @lly 234 @urx 162 @ury 2340 @rwi @setspecial
%%BeginDocument: figures/polys.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
/col8 {.68 .85 .9 setrgbcolor} bind def
/col9 {0 .39 0 setrgbcolor} bind def
/col10 {.65 .17 .17 setrgbcolor} bind def
/col11 {1 .51 0 setrgbcolor} bind def
/col12 {.63 .13 .94 setrgbcolor} bind def
/col13 {1 .75 .8 setrgbcolor} bind def
/col14 {.7 .13 .13 setrgbcolor} bind def
/col15 {1 .84 0 setrgbcolor} bind def
	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-72.0 234.0 translate 0.900 -0.900 scale
% Polyline
n 99 259 m 199 159 l  299 259 l  299 119 l  99 119 l  99 259 l gs 0.75 setgray fill gr
% Polyline
n 199 239 m 259 179 l  179 99 l  219 99 l  259 139 l  259 99 l 
 279 119 l  339 119 l  339 79 l  79 79 l  79 119 l 
 199 239 l gs 0.50 setgray fill gr
% Polyline
n 239 119 m 259 119 l  259 139 l  239 119 l gs 0.25 setgray fill gr
% Polyline
n 199 119 m 259 179 l  239 199 l  199 159 l  159 199 l  99 139 l 
 99 119 l  199 119 l gs 0.25 setgray fill gr
$F2psEnd
%%EndDocument
 @endspecial 330 4939 a Fg(Figure)24 b(1:)35 b(Tw)n(o)25
b(input)g(p)r(olygons.)35 b(The)25 b(area)e(shared)h(b)n(y)h(the)g(p)r
(olygons)f(is)h(shaded)f(with)i(the)330 5038 y(dark)n(est)g(grey)-7
b(.)330 5225 y(The)28 b(clipping)f(pro)r(cess)g(consists)g(of)g(the)h
(follo)n(wing)f(steps:)431 5471 y(1.)42 b(Calculate)32
b(the)i(in)n(tersections)e(b)r(et)n(w)n(een)h(the)h(t)n(w)n(o)e(input)i
(p)r(olygons)e Fe(A)i Fg(and)f Fe(B)t Fg(.)54 b(This)538
5571 y(results)28 b(in)h(the)h(same)f(p)r(olygons,)f(with)h(the)h
(di\013erence)f(that)g(the)h(in)n(tersection)e(p)r(oin)n(ts)538
5670 y(with)g(the)g(other)f(p)r(olygon)f(are)h(added)g(as)g(v)n
(ertices)g(to)g(the)h(p)r(olygons.)1809 5919 y(2)p eop
%%Page: 3 3
3 2 bop 431 390 a Fg(2.)42 b(Lab)r(el)25 b(the)i(edges)e(from)g(b)r
(oth)i(p)r(olygons)d(to)i Fc(Inside)p Fg(,)g Fc(Shared)p
Fg(,)h(or)e Fc(Outside)p Fg(.)35 b Fc(Inside)538 490
y Fg(means)g(that)g(an)h(edge)e(is)i(inside)f(the)h(other)f(p)r
(olygon.)60 b Fc(Shared)36 b Fg(means)f(that)h(b)r(oth)538
589 y(p)r(olygons)30 b(share)g(this)i(edge.)48 b Fc(Outside)30
b Fg(means)h(that)h(an)f(edge)g(is)h(outside)f(the)h(other)538
689 y(p)r(olygon.)431 850 y(3.)42 b(Find)28 b(the)g(minimal)g(p)r
(olygons)e(whic)n(h)i(are)e(created)h(b)n(y)g(the)h(in)n(tersection.)
431 1010 y(4.)42 b(Classify)27 b(all)g(minimal)h(p)r(olygons)e(in)n(to)
h(the)h(output)h(sets)e Fe(A)19 b Fd(\\)f Fe(B)t Fg(,)28
b Fe(A)19 b Fd(n)f Fe(B)32 b Fg(and)27 b Fe(B)c Fd(n)18
b Fe(A)p Fg(.)330 1253 y(The)31 b(next)h(section)f(will)h(sho)n(w)e(ho)
n(w)h(the)h(in)n(tersections)e(can)h(b)r(e)h(computed.)49
b(Section)31 b(4)g(de-)330 1353 y(scrib)r(es)22 b(the)g(pro)r(cess)f
(of)h(lab)r(eling)g(the)g(edges.)35 b(Subsequen)n(tly)-7
b(,)23 b(section)f(5)g(will)g(explain)g(ho)n(w)f(to)330
1453 y(\014nd)j(the)f(minimal)h(p)r(olygons.)34 b(Section)23
b(6)g(\014nishes)g(the)h(description)f(of)g(the)g(basic)g(algorithm,)
330 1552 y(explaining)k(ho)n(w)g(the)h(minimal)g(p)r(olygons)e(are)h
(classi\014ed.)330 1913 y Ff(3)135 b(Calculating)46 b(the)g(in)l
(tersections)413 3990 y @beginspecial 0 @llx 0 @lly 774
@urx 490 @ury 3401 @rwi @setspecial
%%BeginDocument: figures/polys_intersect.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
/col8 {.68 .85 .9 setrgbcolor} bind def
/col9 {0 .39 0 setrgbcolor} bind def
/col10 {.65 .17 .17 setrgbcolor} bind def
/col11 {1 .51 0 setrgbcolor} bind def
/col12 {.63 .13 .94 setrgbcolor} bind def
/col13 {1 .75 .8 setrgbcolor} bind def
/col14 {.7 .13 .13 setrgbcolor} bind def
/col15 {1 .84 0 setrgbcolor} bind def
	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-18.0 508.0 translate 0.900 -0.900 scale
% Polyline
%
% Begin Imported EPS File: poly2.eps
%
n gs
59 339 translate
0.888889 -0.888889 scale
0 -252 translate
-50 -50 translate
save
% EPS file follows:
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 100 def
/vpt 100 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
LTb
LT0
672 211 M
3821 3610 L
6969 211 L
0 4758 V
-6297 0 V
672 211 L
672 211 S
3821 3610 S
6969 211 S
6969 4969 S
672 4969 S
672 211 S
stroke
grestore
end

restore gr
%
% End Imported EPS File: poly2.eps
%
3.000 setlinewidth
% Polyline
n 424 444 m 464 444 l  459 434 l  479 449 l  459 464 l  464 454 l 
 424 454 l  424 444 l  clp gs col-1 s gr
% Polyline
%
% Begin Imported EPS File: poly2_intersect.eps
%
n gs
499 339 translate
0.888889 -0.892857 scale
0 -252 translate
-50 -50 translate
save
% EPS file follows:
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 100 def
/vpt 100 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
LTb
LT0
672 211 M
2561 2250 L
3821 3610 L
5080 2250 L
6969 211 L
0 4758 V
-630 0 V
-629 0 V
-630 0 V
-1259 0 V
-3149 0 V
0 -680 V
672 211 L
672 211 S
2561 2250 S
3821 3610 S
5080 2250 S
6969 211 S
6969 4969 S
6339 4969 S
5710 4969 S
5080 4969 S
3821 4969 S
672 4969 S
672 4289 S
672 211 S
stroke
grestore
end

restore gr
%
% End Imported EPS File: poly2_intersect.eps
%
% Polyline
%
% Begin Imported EPS File: poly1.eps
%
n gs
19 19 translate
1.111111 -1.110294 scale
0 -272 translate
-50 -40 translate
save
% EPS file follows:
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 100 def
/vpt 100 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
LTb
LT0
3578 211 M
5031 1995 L
3094 4374 L
969 0 V
5031 3185 L
0 1189 V
485 -594 V
1453 0 V
0 1189 V
-6297 0 V
0 -1189 V
3578 211 L
3578 211 S
5031 1995 S
3094 4374 S
4063 4374 S
5031 3185 S
5031 4374 S
5516 3780 S
6969 3780 S
6969 4969 S
672 4969 S
672 3780 S
3578 211 S
stroke
grestore
end

restore gr
%
% End Imported EPS File: poly1.eps
%
% Polyline
%
% Begin Imported EPS File: poly1_intersect.eps
%
n gs
479 19 translate
1.111111 -1.110294 scale
0 -272 translate
-50 -40 translate
save
% EPS file follows:
/gnudict 40 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/vshift -46 def
/dl {10 mul} def
/hpt 100 def
/vpt 100 def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke gnulinewidth 2 mul setlinewidth } def
/AL { stroke gnulinewidth 2 div setlinewidth } def
/PL { stroke gnulinewidth setlinewidth } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 dl 2 dl] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 0 1 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 0 1 DL } def
/LT2 { PL [2 dl 3 dl] 1 0 0 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/P { stroke [] 0 setdash
  currentlinewidth 2 div sub M
  0 currentlinewidth V stroke } def
/D { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  P } def
/A { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/B { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  P } def
/C { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/T { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  P  } def
/S { 2 copy A C} def
end
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
/Helvetica findfont 140 scalefont setfont
newpath
LTa
LTb
LT0
3578 211 M
969 1190 V
484 594 V
3578 3780 L
-484 594 V
969 0 V
484 -594 V
484 -595 V
0 595 V
0 594 V
485 -594 V
484 0 V
969 0 V
0 1189 V
-6297 0 V
0 -1189 V
484 -595 V
2610 1401 L
3578 211 L
3578 211 S
4547 1401 S
5031 1995 S
3578 3780 S
3094 4374 S
4063 4374 S
4547 3780 S
5031 3185 S
5031 3780 S
5031 4374 S
5516 3780 S
6000 3780 S
6969 3780 S
6969 4969 S
672 4969 S
672 3780 S
1156 3185 S
2610 1401 S
3578 211 S
stroke
grestore
end

restore gr
%
% End Imported EPS File: poly1_intersect.eps
%
% Polyline
n 424 174 m 464 174 l  459 164 l  479 179 l  459 194 l  464 184 l 
 424 184 l  424 174 l  clp gs col-1 s gr
$F2psEnd
%%EndDocument
 @endspecial 656 4255 a Fg(Figure)27 b(2:)36 b(The)28
b(p)r(olygons)e(b)r(efore)i(and)f(after)g(in)n(tersection)g
(calculation.)330 4442 y(The)41 b(in)n(tersection)f(p)r(oin)n(ts)g(b)r
(et)n(w)n(een)h(t)n(w)n(o)f(p)r(olygons)f(are)h(calculated)g(b)n(y)g
(in)n(tersecting)g(all)330 4542 y(the)34 b(edges)f(of)h(the)h(\014rst)e
(p)r(olygon)g(with)i(all)e(the)h(v)n(ertices)f(of)h(the)g(second)g(p)r
(olygon.)54 b(These)330 4641 y(in)n(tersection)26 b(p)r(oin)n(ts)h(are)
f(added)g(to)h(the)g(p)r(olygons)f(as)g(v)n(ertices.)35
b(The)27 b(new)g(created)f(v)n(ertices)330 4741 y(do)k(con)n(tain)g(a)g
(link)h(to)g(the)g(corresp)r(onding)d(v)n(ertices)i(on)g(the)h(other)f
(p)r(olygon.)45 b(W)-7 b(e)31 b(call)g(the)330 4841 y(resulting)c(p)r
(olygons)f(augmen)n(ted)h(p)r(olygons.)330 5029 y(W)-7
b(e)24 b(ha)n(v)n(e)f(a)h(sp)r(ecial)g(case)f(if)i(w)n(e)e(do)h(not)g
(\014nd)h(an)n(y)e(in)n(tersections.)35 b(This)24 b(means)f(that)i(w)n
(e)e(ha)n(v)n(e)330 5128 y(one)k(of)h(follo)n(wing)e(situations:)431
5372 y(1.)42 b(P)n(olygon)32 b Fe(A)j Fg(is)f(inside)h
Fe(B)t Fg(.)58 b(This)35 b(is)f(the)h(case)f(when)h(an)n(y)f(v)n(ertex)
f(of)i Fe(A)g Fg(is)f(inside)h Fe(B)t Fg(,)538 5471 y(whic)n(h)h
(easily)f(can)g(b)r(e)i(tested.)63 b(If)36 b Fe(A)g Fg(is)g(inside)h
Fe(B)t Fg(,)h(w)n(e)e(arbitrarily)e(split)i Fe(B)41 b
Fg(in)36 b(t)n(w)n(o)538 5571 y(p)r(olygons,)26 b(with)h
Fe(A)h Fg(somewhere)e(on)h(the)g(split.)38 b(W)-7 b(e)27
b(ha)n(v)n(e)f(to)h(do)g(this,)h(b)r(ecause)f(w)n(e)f(do)538
5670 y(not)h(w)n(an)n(t)g(p)r(olygons)f(with)j(holes.)1809
5919 y(3)p eop
%%Page: 4 4
4 3 bop 431 390 a Fg(2.)42 b(P)n(olygon)25 b Fe(B)32
b Fg(is)27 b(inside)h Fe(B)t Fg(.)37 b(Similar)27 b(handled)h(to)f(the)
h(case)f(ab)r(o)n(v)n(e.)431 556 y(3.)42 b(The)27 b(p)r(olygons)g
Fe(A)h Fg(and)f Fe(B)32 b Fg(are)26 b(disjunct.)330 819
y(In)i(all)f(these)h(three)f(cases)g(w)n(e)g(are)f(\014nished.)330
1192 y Ff(4)135 b(Lab)t(eling)45 b(edges)330 1472 y Fg(All)31
b(edges)f(in)h(the)g(augmen)n(ted)f(p)r(olygons)f(should)i(b)r(e)g(lab)
r(eled)g Fc(Inside)p Fg(,)f Fc(Shared)p Fg(,)j(or)c Fc(Out-)330
1571 y(side)p Fg(.)49 b(An)33 b(edge)e(is)h Fc(Shared)h
Fg(if)g(b)r(oth)f(v)n(ertices)f(of)h(this)h(edge)e(are)g(connected)h
(to)g(the)h(other)330 1671 y(p)r(olygon)26 b(and)h(if)g(the)h(t)n(w)n
(o)e(v)n(ertices)g(they)h(are)f(connected)h(to)g(on)g(the)g(other)g(p)r
(olygon)f(are)g(the)330 1771 y(t)n(w)n(o)h(v)n(ertices)f(of)i(one)f
(edge.)413 3121 y @beginspecial -5 @llx 0 @lly 450 @urx
185 @ury 3401 @rwi @setspecial
%%BeginDocument: figures/labeled_edit.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
/col8 {.68 .85 .9 setrgbcolor} bind def
/col9 {0 .39 0 setrgbcolor} bind def
/col10 {.65 .17 .17 setrgbcolor} bind def
/col11 {1 .51 0 setrgbcolor} bind def
/col12 {.63 .13 .94 setrgbcolor} bind def
/col13 {1 .75 .8 setrgbcolor} bind def
/col14 {.7 .13 .13 setrgbcolor} bind def
/col15 {1 .84 0 setrgbcolor} bind def
	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-36.0 275.0 translate 0.900 -0.900 scale
% Polyline
%
% Begin Imported EPS File: bb
%
n gs
39 99 translate
0.488978 -0.488152 scale
0 -422 translate
0 422 translate
1 -1 scale
-84 -194 translate
save
% EPS file follows:
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2087 3185
2594 2577
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 484.475 600.3 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2087 1361
1834 1057
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 342.532 316.413 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
1834 1057
2341 1057
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 437.223 316.413 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2341 1057
2594 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 484.475 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2847 1361
2847 1057
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 531.727 316.413 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2847 1057
3101 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 579.166 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3354 1361
3861 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 721.11 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3861 1361
3861 753
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 721.11 259.636 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3861 753
567 753
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 105.897 259.636 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
567 753
567 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 105.897 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
567 1361
821 1665
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 153.336 429.968 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
1581 2577
2087 3185
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 389.784 713.855 ] concat
[
( )
] Text
End

End %I eop




end
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [4 4 4 4] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3101 1361
3354 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 626.418 373.191 ] concat
[
( )
] Text
End

End %I eop




end
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2594 2577
2847 2273
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 531.727 543.523 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2847 2273
2087 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 389.784 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2594 1361
2847 1665
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 531.727 429.968 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2847 1665
2847 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 531.727 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
821 1665
1581 2577
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 295.28 600.3 ] concat
[
( )
] Text
End

End %I eop





end
restore gr
%
% End Imported EPS File: bb
%
% Polyline
%
% Begin Imported EPS File: aa
%
n gs
295 99 translate
0.488978 -0.488152 scale
0 -422 translate
0 422 translate
1 -1 scale
-84 -194 translate
save
% EPS file follows:
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
1581 2577
2087 1969
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 389.784 486.745 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2087 1969
2594 2577
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 484.475 600.3 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2847 1361
2594 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 484.475 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2087 1361
821 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 153.336 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [8 8] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
821 1361
821 1665
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 153.336 429.968 ] concat
[
( )
] Text
End

End %I eop



end
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
821 3489
1581 2577
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 295.28 600.3 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2594 2577
3354 3489
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 626.418 770.632 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3354 3489
3354 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 626.418 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3101 1361
2847 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 531.727 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
2594 1361
2087 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 389.784 373.191 ] concat
[
( )
] Text
End

Begin %I MLine
5 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
821 1665
821 3489
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 153.336 770.632 ] concat
[
( )
] Text
End

End %I eop




end
50 dict begin /arrowHeight 8 def /arrowWidth 4 def /none null def
/numGraphicParameters 17 def /stringLimit 65535 def /Begin{save
numGraphicParameters dict begin}def /End{end restore}def /SetB{dup type
/nulltype eq{pop false /brushRightArrow idef false /brushLeftArrow idef true
/brushNone idef}{/brushDashOffset idef /brushDashArray idef 0 ne
/brushRightArrow idef 0 ne /brushLeftArrow idef /brushWidth idef false
/brushNone idef}ifelse}def /SetCFg{/fgblue idef /fggreen idef /fgred idef}def
/SetCBg{/bgblue idef /bggreen idef /bgred idef}def /SetF{/printSize idef
/printFont idef}def /SetP{dup type /nulltype eq{pop true /patternNone idef}{
/patternGrayLevel idef patternGrayLevel -1 eq{/patternString idef}if false
/patternNone idef}ifelse}def /BSpl{0 begin storexyn newpath n 1 gt{0 0 0 0 0 0
1 1 true subspline n 2 gt{0 0 0 0 1 1 2 2 false subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 2 copy false subspline}if n 2 sub dup n 1 sub dup 2
copy 2 copy false subspline patternNone not brushLeftArrow not brushRightArrow
not and and{ifill}if brushNone not{istroke}if 0 0 1 1 leftarrow n 2 sub dup n
1 sub dup rightarrow}if end}dup 0 4 dict put def /Circ{newpath 0 360 arc
patternNone not{ifill}if brushNone not{istroke}if}def /CBSpl{0 begin dup 2 gt{
storexyn newpath n 1 sub dup 0 0 1 1 2 2 true subspline 1 1 n 3 sub{/i exch
def i 1 sub dup i dup i 1 add dup i 2 add dup false subspline}for n 3 sub dup
n 2 sub dup n 1 sub dup 0 0 false subspline n 2 sub dup n 1 sub dup 0 0 1 1
false subspline patternNone not{ifill}if brushNone not{istroke}if}{Poly}
ifelse end}dup 0 4 dict put def /Elli{0 begin newpath 4 2 roll translate scale
0 0 1 0 360 arc patternNone not{ifill}if brushNone not{istroke}if end}dup 0 1
dict put def /Line{0 begin 2 storexyn newpath x 0 get y 0 get moveto x 1 get y
1 get lineto brushNone not{istroke}if 0 0 1 1 leftarrow 0 0 1 1 rightarrow end
}dup 0 4 dict put def /MLine{0 begin storexyn newpath n 1 gt{x 0 get y 0 get
moveto 1 1 n 1 sub{/i exch def x i get y i get lineto}for patternNone not
brushLeftArrow not brushRightArrow not and and{ifill}if brushNone not{istroke}
if 0 0 1 1 leftarrow n 2 sub dup n 1 sub dup rightarrow}if end}dup 0 4 dict
put def /Poly{3 1 roll newpath moveto -1 add{lineto}repeat closepath
patternNone not{ifill}if brushNone not{istroke}if}def /Rect{0 begin /t exch
def /r exch def /b exch def /l exch def newpath l b moveto l t lineto r t
lineto r b lineto closepath patternNone not{ifill}if brushNone not{istroke}if
end}dup 0 4 dict put def /Text{ishow}def /idef{dup where{pop pop pop}{exch def
}ifelse}def /ifill{0 begin gsave patternGrayLevel -1 ne{fgred bgred fgred sub
patternGrayLevel mul add fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor eofill}{eoclip
originalCTM setmatrix pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def /h t b sub ceiling cvi def /imageByteWidth w 8 div
ceiling cvi def /imageHeight h def bgred bggreen bgblue setrgbcolor eofill
fgred fggreen fgblue setrgbcolor w 0 gt h 0 gt and{l b translate w h scale w h
true[w 0 0 h neg 0 h]{patternproc}imagemask}if}ifelse grestore end}dup 0 8
dict put def /istroke{gsave brushDashOffset -1 eq{[]0 setdash 1 setgray}{
brushDashArray brushDashOffset setdash fgred fggreen fgblue setrgbcolor}
ifelse brushWidth setlinewidth originalCTM setmatrix stroke grestore}def
/ishow{0 begin gsave fgred fggreen fgblue setrgbcolor /fontDict printFont
findfont printSize scalefont dup setfont def /descender fontDict begin 0[
FontBBox]1 get FontMatrix end transform exch pop def /vertoffset 0 descender
sub printSize sub printFont /Courier ne printFont /Courier-Bold ne and{1 add}
if def{0 vertoffset moveto show /vertoffset vertoffset printSize sub def}
forall grestore end}dup 0 3 dict put def /patternproc{0 begin
/patternByteLength patternString length def /patternHeight patternByteLength 8
mul sqrt cvi def /patternWidth patternHeight def /patternByteWidth
patternWidth 8 idiv def /imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def /imageMaxHeight imageByteMaxLength
imageByteWidth idiv patternHeight idiv patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store /imageString imageByteWidth
imageMaxHeight mul patternByteWidth add string def 0 1 imageMaxHeight 1 sub{
/y exch def /patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def 0 patternByteWidth imageByteWidth 1 sub{/x
exch def imageString imageRow x add patternRowString putinterval}for}for
imageString end}dup 0 12 dict put def /min{dup 3 2 roll dup 4 3 roll lt{exch}
if pop}def /max{dup 3 2 roll dup 4 3 roll gt{exch}if pop}def /arrowhead{0
begin transform originalCTM itransform /taily exch def /tailx exch def
transform originalCTM itransform /tipy exch def /tipx exch def /dy tipy taily
sub def /dx tipx tailx sub def /angle dx 0 ne dy 0 ne or{dy dx atan}{90}
ifelse def gsave originalCTM setmatrix tipx tipy translate angle rotate
newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto arrowHeight neg
arrowWidth 2 div neg lineto closepath patternNone not{originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def /padtail brushWidth 2 div def tipx tipy translate angle
rotate padtip 0 translate arrowHeight padtip add padtail add arrowHeight div
dup scale arrowheadpath ifill}if brushNone not{originalCTM setmatrix tipx tipy
translate angle rotate arrowheadpath istroke}if grestore end}dup 0 9 dict put
def /arrowheadpath{newpath 0 0 moveto arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto closepath}def /leftarrow{0 begin y
exch get /taily exch def x exch get /tailx exch def y exch get /tipy exch def
x exch get /tipx exch def brushLeftArrow{tipx tipy tailx taily arrowhead}if
end}dup 0 4 dict put def /rightarrow{0 begin y exch get /tipy exch def x exch
get /tipx exch def y exch get /taily exch def x exch get /tailx exch def
brushRightArrow{tipx tipy tailx taily arrowhead}if end}dup 0 4 dict put def
/midpoint{0 begin /y1 exch def /x1 exch def /y0 exch def /x0 exch def x0 x1
add 2 div y0 y1 add 2 div end}dup 0 4 dict put def /thirdpoint{0 begin /y1
exch def /x1 exch def /y0 exch def /x0 exch def x0 2 mul x1 add 3 div y0 2 mul
y1 add 3 div end}dup 0 4 dict put def /subspline{0 begin /movetoNeeded exch
def y exch get /y3 exch def x exch get /x3 exch def y exch get /y2 exch def x
exch get /x2 exch def y exch get /y1 exch def x exch get /x1 exch def y exch
get /y0 exch def x exch get /x0 exch def x1 y1 x2 y2 thirdpoint /p1y exch def
/p1x exch def x2 y2 x1 y1 thirdpoint /p2y exch def /p2x exch def x1 y1 x0 y0
thirdpoint p1x p1y midpoint /p0y exch def /p0x exch def x2 y2 x3 y3 thirdpoint
p2x p2y midpoint /p3y exch def /p3x exch def movetoNeeded{p0x p0y moveto}if
p1x p1y p2x p2y p3x p3y curveto end}dup 0 17 dict put def /storexyn{/n exch
def /y n array def /x n array def n 1 sub -1 0{/i exch def y i 3 2 roll put x
i 3 2 roll put}for}def


Begin
[ 0.8 0 0 0.8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I MLine
5 0 0 [4 4 4 4] 17 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 0.186768 0 0 0.186768 0 112 ] concat
3354 1361
3101 1361
2 MLine
End

Begin %I Text
0 0 0 SetCFg
/Helvetica 14 SetF
[ 1 0 0 1 579.166 373.191 ] concat
[
( )
] Text
End

End %I eop





end
restore gr
%
% End Imported EPS File: aa
%
$F2psEnd
%%EndDocument
 @endspecial 330 3387 a(Figure)d(3:)34 b(The)25 b(lab)r(eling)e(of)i
(the)f(edges)g(of)g(the)g(augmen)n(ted)g(p)r(olygons.)34
b(The)25 b(con)n(tin)n(ues)e(lines)330 3487 y(are)k Fc(Outside)p
Fg(,)f(the)i(large)e(stipples)i Fc(Inside)f Fg(and)g(the)h(short)f
(stipple)h Fc(Shared)p Fg(.)330 3685 y(The)j(resulting)g(problem)f(is)h
(to)g(see)g(whether)g(the)g(edge)g(is)g Fc(Inside)f Fg(or)g
Fc(Outside)g Fg(the)i(other)330 3785 y(p)r(olygon.)k(A)28
b(ten)n(tativ)n(e)f(algorithm)g(seems:)330 4048 y Fc(if)g
Fg(is)p 474 4048 25 4 v 30 w(inside\(other)p 934 4048
V 30 w(p)r(olygon,)f(edge.some)p 1666 4048 V 29 w(p)r(oin)n(t\))i
Fc(then)413 4148 y Fg(edge.lab)r(el)f(=)g(Inside)330
4247 y Fc(else)413 4347 y Fg(edge.lab)r(el)g(=)g(Outside)1215
4447 y Fc(Algorithm)i(1:)37 b Fg(A)28 b(naiv)n(e)e(algorithm)330
4710 y(The)21 b(ma)5 b(jor)20 b(problem)h(in)h(this)f(approac)n(h)e(is)
j(ho)n(w)e(to)h(calculate)g(edge.somep)r(oin)n(t,)h(this)f(a)g(p)r(oin)
n(t)330 4809 y(on)37 b(the)h(edge.)66 b(The)37 b(v)n(ertices)f
(themselv)n(es)h(are)f(not)i(usable,)h(as)e(they)h(can)f(coincide)g
(with)330 4909 y(v)n(ertices)c(on)h(the)h(other)e(p)r(olygon.)56
b(An)n(y)34 b(other)g(p)r(oin)n(t)g(on)g(an)g(edge)g(\(suc)n(h)g(as)g
(the)g(middle\))330 5009 y(results)g(in)h(n)n(umerical)f(errors)f(due)i
(to)g(rounding.)58 b(Suc)n(h)35 b(n)n(umerical)f(errors)e(can)j(dislo)r
(cate)330 5108 y(suc)n(h)26 b(a)f(p)r(oin)n(t)h(from)g(just)g(b)r
(eside)h(an)e(edge)h(of)g(the)g(other)f(p)r(olygon)g(to)h(on)g(a)f(p)r
(osition)h(on)g(that)330 5208 y(other)36 b(edge)f({)h(for)g(whic)n(h)g
(p)r(osition)g(it)g(is)g(not)g(p)r(ossible)g(to)g(decide)g(whether)g
(the)h(p)r(oin)n(t)f(is)330 5308 y(inside)28 b(or)e(outside)i(the)g
(other)f(p)r(olygon.)36 b(A)28 b(more)e(stable)i(algorithm)e(is)i(the)g
(follo)n(wing:)330 5571 y Fc(if)f Fg(edge.\014rst)p 747
5571 V 29 w(v)n(ertex.is)p 1080 5571 V 29 w(connected\(\))h
Fc(then)413 5670 y Fg(lab)r(el)p 591 5670 V 30 w(angle\(edge,)e
(edge.\014rst)p 1383 5670 V 29 w(v)n(ertex.connect\))1809
5919 y(4)p eop
%%Page: 5 5
5 4 bop 330 390 a Fc(else)26 b(if)i Fg(edge.second)p
1024 390 25 4 v 28 w(v)n(ertex.is)p 1356 390 V 29 w(connected\(\))g
Fc(then)413 490 y Fg(lab)r(el)p 591 490 V 30 w(angle\(edge,)e
(edge.second)p 1480 490 V 29 w(v)n(ertex.connect\))330
589 y Fc(else)g(if)i Fg(is)p 654 589 V 29 w(inside\(other)p
1113 589 V 30 w(p)r(olygon,)f(edge.a)p 1707 589 V 29
w(v)n(ertex\))f Fc(then)413 689 y Fg(edge.lab)r(el)h(=)g(Inside)330
789 y Fc(else)413 888 y Fg(edge.lab)r(el)g(=)g(Outside)945
988 y Fc(Algorithm)i(2:)36 b Fg(Stable)28 b(v)n(ersion)e(of)i(naiv)n(e)
f(algorithm)330 1154 y(A)36 b(v)n(ertex)f(is)g(connected)h(if)g(it)g
(is)g(an)f(in)n(tersection)g(p)r(oin)n(t)h(with)g(the)g(other)f(p)r
(olygon.)60 b(The)330 1254 y(routine)27 b(lab)r(el)p
794 1254 V 30 w(angle\(\))g(giv)n(en)g(b)r(elo)n(w:)330
1519 y(lab)r(el)p 508 1519 V 30 w(angle\()g(edge,)g(v)n(ertex)g(\))330
1619 y Fc(b)s(egin)413 1719 y Fg(V)-7 b(ector)27 b(prev)g(=)g(v)n
(ertex)g(-)g(v)n(ertex.prev)413 1818 y(V)-7 b(ector)27
b(next)h(=)f(v)n(ertex.next)g(-)g(v)n(ertex)413 2017
y Fc(if)g Fg(angle\(prev,next\))g Fd(\025)h Fe(\031)j
Fc(then)496 2117 y(if)c Fg(\(angle\(prev,edge\))g Fd(\025)g
Fe(\031)s Fg(\))h Fc(and)h Fg(\(angle\(next,edge\))e
Fd(\025)g Fe(\031)s Fg(\))h Fc(then)579 2217 y Fg(edge.lab)r(el)f(=)g
(Outside)496 2316 y Fc(else)579 2416 y Fg(edge.lab)r(el)g(=)g(Inside)
413 2516 y Fc(else)496 2615 y(if)g Fg(\(angle\(prev,edge\))g
Fd(\025)g Fe(\031)s Fg(\))h Fc(or)g Fg(\(angle\(next,edge)f(\))h
Fd(\025)f Fe(\031)s Fg(\))i Fc(then)579 2715 y Fg(edge.lab)r(el)e(=)g
(Outside)496 2814 y Fc(else)579 2914 y Fg(edge.lab)r(el)g(=)g(Inside)
330 3014 y Fc(end)1131 3113 y(Algorithm)i(3:)37 b Fg(Computing)27
b(lab)r(el)p 2315 3113 V 30 w(angle)330 3379 y(The)c(idea)f(b)r(ehind)h
(this)g(algorithm)e(is)i(that)g(if)g(one)f(of)g(the)h(v)n(ertices)f(on)
g(the)h(edge)f(is)g(connected)330 3479 y(to)31 b(the)g(other)g(p)r
(olygon)f(w)n(e)h(can)f(c)n(hec)n(k)g(for)h(that)g(v)n(ertex)f(whether)
h(it)h(lies)f(on)f(the)i(inside)f(or)330 3578 y(the)j(outside)f(of)g
(the)h(other)f(p)r(olygon.)53 b(If)34 b(neither)f(of)h(the)f(v)n
(ertices)g(of)g(the)h(edge)f(la)n(y)f(on)h(an)330 3678
y(edge)28 b(of)g(the)g(other)g(p)r(olygon)f(w)n(e)h(can)g(use)g(b)r
(oth)g(v)n(ertices)f(of)i(the)f(edge)g(in)g(the)h(test)f(whether)330
3778 y(they)i(are)e(inside)i(the)g(other)f(p)r(olygon.)41
b(The)30 b(calculation)e(of)i(angle\(a,b\))f(can)g(b)r(e)h(calculated)
330 3877 y(using)h(the)h(cross)d(pro)r(duct)j(\(here)f(w)n(e)g(assume)f
(that)i(the)g Fe(z)i Fg(comp)r(onen)n(t)d(of)g Fe(a)h
Fg(and)f Fe(b)g Fg(are)f(0\):)330 3977 y(\()p Fe(a)10
b Fd(\002)g Fe(b)p Fg(\))559 3989 y Fb(z)620 3977 y Fg(=)22
b Fe(a)751 3989 y Fb(x)793 3977 y Fe(b)829 3989 y Fb(y)878
3977 y Fd(\000)10 b Fe(a)997 3989 y Fb(y)1037 3977 y
Fe(b)1073 3989 y Fb(x)1137 3977 y Fg(=)23 b Fd(j)p Fe(a)p
Fd(jj)p Fe(b)p Fd(j)p Fe(sin\036)p Fg(.)35 b(If)23 b(this)h(quan)n(tit)
n(y)f(is)g(p)r(ositiv)n(e)g(the)h(angle)e Fe(\036)i Fg(is)f(smaller)330
4076 y(then)28 b Fe(\031)j Fg(else)c Fe(\036)i Fg(is)e(bigger)f(then)i
Fe(\031)s Fg(.)330 4451 y Ff(5)135 b(Finding)44 b(minimal)i(p)t
(olygons)330 4732 y Fg(All)27 b(the)h(edges)e(from)h(b)r(oth)g(augmen)n
(ted)f(p)r(olygons)g(are)g(doubled)h(in)g(a)g(forw)n(ard)e(and)i(a)f
(bac)n(k-)330 4832 y(w)n(ard)f(edge,)h(whic)n(h)g(w)n(e)g(will)h(call)f
(directed)g(edges.)36 b Fc(Shared)27 b Fg(edges)e(are)g(doubled)i(only)
f(once.)330 4931 y(Figure)32 b(4)g(sho)n(ws)g(the)h(directed)f(edges.)
52 b(F)-7 b(or)32 b(all)g(these)h(directed)f(edges)g(w)n(e)g(searc)n(h)
g(for)g(the)330 5031 y(smallest)g(clo)r(c)n(kwise)g(orien)n(ted)f(p)r
(olygons)h(it)h(is)f(part)g(of.)52 b(This)32 b(is)h(p)r(erformed)f(b)n
(y)g(follo)n(wing)330 5131 y(the)k(directed)f(edges)g(suc)n(h)g(that)h
(at)f(ev)n(ery)f(in)n(tersection)h(w)n(e)g(pro)r(ceed)g(with)g(that)h
(directed)330 5230 y(edge)c(whic)n(h)g(starts)f(at)h(that)h(in)n
(tersection,)f(and)g(whic)n(h)h(has)e(the)i(smallest)f(angle)f(with)i
(the)330 5330 y(previous)25 b(directed)h(edge.)36 b(A)27
b(directed)f(edge)g(can)g(only)g(b)r(e)g(part)g(of)h(one)e(p)r(olygon.)
36 b(This)26 b(also)330 5429 y(leads)34 b(to)h(one)f(coun)n(ter)g(clo)r
(c)n(kwise)g(p)r(olygon,)h(whic)n(h)g(is)f(the)i(outer)e(con)n(tour)f
(of)i(the)g(union.)330 5529 y(This)28 b(p)r(olygon)e(should)i(b)r(e)g
(deleted)g(from)f(the)h(set)f(of)h(minimal)g(p)r(olygons.)1809
5919 y(5)p eop
%%Page: 6 6
6 5 bop 413 2410 a @beginspecial 0 @llx 0 @lly 727 @urx
518 @ury 3401 @rwi @setspecial
%%BeginDocument: figures/edge_double.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
/col8 {.68 .85 .9 setrgbcolor} bind def
/col9 {0 .39 0 setrgbcolor} bind def
/col10 {.65 .17 .17 setrgbcolor} bind def
/col11 {1 .51 0 setrgbcolor} bind def
/col12 {.63 .13 .94 setrgbcolor} bind def
/col13 {1 .75 .8 setrgbcolor} bind def
/col14 {.7 .13 .13 setrgbcolor} bind def
/col15 {1 .84 0 setrgbcolor} bind def
	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-58.0 558.0 translate 0.900 -0.900 scale
1.000 setlinewidth
% Polyline
n 84 84 m 854 84 l gs col-1 s gr
n 838.000 80.000 m 854.000 84.000 l 838.000 88.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 854 84 m 854 194 l gs col-1 s gr
n 858.000 178.000 m 854.000 194.000 l 850.000 178.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 854 194 m 739 194 l gs col-1 s gr
n 755.000 198.000 m 739.000 194.000 l 755.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 739 194 m 679 194 l gs col-1 s gr
n 695.000 198.000 m 679.000 194.000 l 695.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 679 194 m 624 139 l gs col-1 s gr
n 632.485 153.142 m 624.000 139.000 l 638.142 147.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 614 144 m 614 194 l gs col-1 s gr
n 618.000 178.000 m 614.000 194.000 l 610.000 178.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 614 204 m 614 249 l gs col-1 s gr
n 618.000 233.000 m 614.000 249.000 l 610.000 233.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 614 249 m 569 204 l gs col-1 s gr
n 577.485 218.142 m 569.000 204.000 l 583.142 212.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 559 194 m 504 139 l gs col-1 s gr
n 512.485 153.142 m 504.000 139.000 l 518.142 147.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 494 134 m 404 134 l gs col-1 s gr
n 420.000 138.000 m 404.000 134.000 l 420.000 130.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 399 144 m 449 194 l gs col-1 s gr
n 440.515 179.858 m 449.000 194.000 l 434.858 185.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 454 204 m 614 379 l gs col-1 s gr
n 606.156 364.492 m 614.000 379.000 l 600.252 369.891 l gs 2 setlinejoin col-1 s gr
% Polyline
n 614 379 m 559 434 l gs col-1 s gr
n 573.142 425.515 m 559.000 434.000 l 567.485 419.858 l gs 2 setlinejoin col-1 s gr
% Polyline
n 559 434 m 444 319 l gs col-1 s gr
n 452.485 333.142 m 444.000 319.000 l 458.142 327.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 434 319 m 319 434 l gs col-1 s gr
n 333.142 425.515 m 319.000 434.000 l 327.485 419.858 l gs 2 setlinejoin col-1 s gr
% Polyline
n 314 439 m 144 609 l gs col-1 s gr
n 158.142 600.515 m 144.000 609.000 l 152.485 594.858 l gs 2 setlinejoin col-1 s gr
% Polyline
n 144 609 m 144 269 l gs col-1 s gr
n 140.000 285.000 m 144.000 269.000 l 148.000 285.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 134 249 m 84 199 l gs col-1 s gr
n 92.485 213.142 m 84.000 199.000 l 98.142 207.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 84 199 m 84 84 l gs col-1 s gr
n 80.000 100.000 m 84.000 84.000 l 88.000 100.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 74 79 m 74 199 l gs col-1 s gr
n 78.000 183.000 m 74.000 199.000 l 70.000 183.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 79 204 m 134 259 l gs col-1 s gr
n 125.515 244.858 m 134.000 259.000 l 119.858 250.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 134 259 m 134 619 l gs col-1 s gr
n 138.000 603.000 m 134.000 619.000 l 130.000 603.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 144 619 m 319 444 l gs col-1 s gr
n 304.858 452.485 m 319.000 444.000 l 310.515 458.142 l gs 2 setlinejoin col-1 s gr
% Polyline
n 319 444 m 434 559 l gs col-1 s gr
n 425.515 544.858 m 434.000 559.000 l 419.858 550.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 444 559 m 559 444 l gs col-1 s gr
n 544.858 452.485 m 559.000 444.000 l 550.515 458.142 l gs 2 setlinejoin col-1 s gr
% Polyline
n 559 444 m 734 619 l gs col-1 s gr
n 725.515 604.858 m 734.000 619.000 l 719.858 610.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 734 609 m 564 439 l gs col-1 s gr
n 572.485 453.142 m 564.000 439.000 l 578.142 447.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 744 619 m 744 204 l gs col-1 s gr
n 740.000 220.000 m 744.000 204.000 l 748.000 220.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 734 204 m 734 609 l gs col-1 s gr
n 738.000 593.000 m 734.000 609.000 l 730.000 593.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 679 204 m 734 204 l gs col-1 s gr
n 718.000 200.000 m 734.000 204.000 l 718.000 208.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 744 204 m 854 204 l gs col-1 s gr
n 838.000 200.000 m 854.000 204.000 l 838.000 208.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 864 194 m 864 84 l gs col-1 s gr
n 860.000 100.000 m 864.000 84.000 l 868.000 100.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 854 74 m 79 74 l gs col-1 s gr
n 95.000 78.000 m 79.000 74.000 l 95.000 70.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 554 439 m 439 554 l gs col-1 s gr
n 453.142 545.515 m 439.000 554.000 l 447.485 539.858 l gs 2 setlinejoin col-1 s gr
% Polyline
n 439 554 m 324 439 l gs col-1 s gr
n 332.485 453.142 m 324.000 439.000 l 338.142 447.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 324 439 m 439 324 l gs col-1 s gr
n 424.858 332.485 m 439.000 324.000 l 430.515 338.142 l gs 2 setlinejoin col-1 s gr
% Polyline
n 439 324 m 554 439 l gs col-1 s gr
n 545.515 424.858 m 554.000 439.000 l 539.858 430.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 144 269 m 314 439 l gs col-1 s gr
n 305.515 424.858 m 314.000 439.000 l 299.858 430.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 319 434 m 144 259 l gs col-1 s gr
n 152.485 273.142 m 144.000 259.000 l 158.142 267.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 144 259 m 144 204 l gs col-1 s gr
n 140.000 220.000 m 144.000 204.000 l 148.000 220.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 144 204 m 454 204 l gs col-1 s gr
n 438.000 200.000 m 454.000 204.000 l 438.000 208.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 449 194 m 144 194 l gs col-1 s gr
n 160.000 198.000 m 144.000 194.000 l 160.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 134 204 m 134 249 l gs col-1 s gr
n 138.000 233.000 m 134.000 249.000 l 130.000 233.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 459 194 m 409 144 l gs col-1 s gr
n 417.485 158.142 m 409.000 144.000 l 423.142 152.485 l gs 2 setlinejoin col-1 s gr
% Polyline
n 409 144 m 499 144 l gs col-1 s gr
n 483.000 140.000 m 499.000 144.000 l 483.000 148.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 499 144 m 549 194 l gs col-1 s gr
n 540.515 179.858 m 549.000 194.000 l 534.858 185.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 549 194 m 459 194 l gs col-1 s gr
n 475.000 198.000 m 459.000 194.000 l 475.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 624 194 m 624 149 l gs col-1 s gr
n 620.000 165.000 m 624.000 149.000 l 628.000 165.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 624 149 m 669 194 l gs col-1 s gr
n 660.515 179.858 m 669.000 194.000 l 654.858 185.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 669 194 m 624 194 l gs col-1 s gr
n 640.000 198.000 m 624.000 194.000 l 640.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 564 439 m 619 384 l gs col-1 s gr
n 604.858 392.485 m 619.000 384.000 l 610.515 398.142 l gs 2 setlinejoin col-1 s gr
% Polyline
n 619 374 m 464 204 l gs col-1 s gr
n 471.824 218.518 m 464.000 204.000 l 477.736 213.128 l gs 2 setlinejoin col-1 s gr
% Polyline
n 464 204 m 559 204 l gs col-1 s gr
n 543.000 200.000 m 559.000 204.000 l 543.000 208.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 559 204 m 614 259 l gs col-1 s gr
n 605.515 244.858 m 614.000 259.000 l 599.858 250.515 l gs 2 setlinejoin col-1 s gr
% Polyline
n 624 254 m 624 204 l gs col-1 s gr
n 620.000 220.000 m 624.000 204.000 l 628.000 220.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 624 204 m 679 204 l gs col-1 s gr
n 663.000 200.000 m 679.000 204.000 l 663.000 208.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 614 194 m 559 194 l gs col-1 s gr
n 575.000 198.000 m 559.000 194.000 l 575.000 190.000 l gs 2 setlinejoin col-1 s gr
% Polyline
n 569 204 m 614 204 l gs col-1 s gr
n 598.000 200.000 m 614.000 204.000 l 598.000 208.000 l gs 2 setlinejoin col-1 s gr
/Times-Roman findfont 12.00 scalefont setfont
64 69 m 
gs 1 -1 scale ( ) col-1 show gr
/Times-Roman findfont 12.00 scalefont setfont
869 59 m 
gs 1 -1 scale ( ) col-1 show gr
$F2psEnd
%%EndDocument
 @endspecial 1035 2676 a Fg(Figure)27 b(4:)37 b(The)28
b(forw)n(ard)d(and)j(bac)n(kw)n(ard)d(edges.)330 2929
y Ff(6)135 b(Classifying)46 b(minimal)g(p)t(olygons)330
3199 y Fg(The)32 b(set)g(of)f(minimal)h(p)r(olygons)f(found)h(co)n(v)n
(ers)e(the)i(whole)f(area)f(of)i(the)g(union)g(of)g(the)g(t)n(w)n(o)330
3299 y(input)27 b(p)r(olygons.)36 b(No)n(w)26 b(w)n(e)g(ha)n(v)n(e)g
(to)g(classify)g(eac)n(h)g(of)g(the)h(p)r(olygons)f(to)g(b)r(e)h(mem)n
(b)r(er)g(one)f(of)330 3398 y(the)f(sets)f Fe(A)13 b
Fd(\\)g Fe(B)t Fg(,)26 b Fe(A)13 b Fd(n)g Fe(B)27 b Fg(or)d
Fe(B)17 b Fd(n)c Fe(A)p Fg(.)35 b(T)-7 b(o)24 b(p)r(erform)g(this)h
(classi\014cation)f(w)n(e)g(in)n(tro)r(duce)g(the)h(term)330
3498 y(paren)n(tho)r(o)r(d.)36 b(P)n(aren)n(tho)r(o)r(d)24
b(is)j(de\014ned)g(as)f(a)g(relation)f(b)r(et)n(w)n(een)i(edges)f(and)g
(input)h(p)r(olygons)330 3597 y(and)i(b)r(et)n(w)n(een)g(minimal)g(p)r
(olygons)f(and)h(input)h(p)r(olygons.)40 b(If)30 b(the)f(paren)n(tho)r
(o)r(d)g(is)g(true)g(it)g(is)330 3697 y(sure)k(that)h(the)f(ob)5
b(ject)34 b(is)f(part)g(of)g(the)h(input)g(p)r(olygon.)54
b(If)34 b(the)f(paren)n(tho)r(o)r(d)g(is)g(false)g(it)h(is)330
3797 y(sure)29 b(that)h(the)h(ob)5 b(ject)29 b(is)h(not)g(part)g(of)f
(the)i(input)f(p)r(olygon.)43 b(Besides)30 b(the)g(v)-5
b(alues)29 b(true)h(and)330 3896 y(false,)g(a)g(paren)n(tho)r(o)r(d)f
(can)h(also)f(b)r(e)h(unkno)n(wn)g(and)g(mixed.)44 b(Unkno)n(wn)30
b(means)f(that)i(w)n(e)e(do)330 3996 y(not)f(ha)n(v)n(e)e(conclusiv)n
(e)g(evidence.)37 b(Mixed)28 b(means)f(that)h(con)n(tradictory)d
(evidence)i(is)h(presen)n(t.)330 4096 y(This)e(is)g(only)g(p)r(ossible)
g(for)g(minimal)g(p)r(olygons,)g(and)g(means)f(that)i(the)f(minimal)h
(p)r(olygon)e(is)330 4195 y(a)i(hole)g(b)r(et)n(w)n(een)h(the)g(t)n(w)n
(o)f(input)h(p)r(olygons.)330 4383 y(The)c(classi\014cation)f(of)h(the)
h(minimal)f(p)r(olygons)f(is)h(p)r(erformed)g(in)h(a)e(t)n(w)n(o-step)h
(pro)r(cess.)34 b(First)330 4482 y(w)n(e)28 b(c)n(hec)n(k)g(the)g
(paren)n(tho)r(o)r(d)g(of)g(eac)n(h)g(minimal)h(p)r(olygon.)38
b(After)29 b(that,)g(w)n(e)f(decide)h(to)f(whic)n(h)330
4582 y(set)g(the)g(minimal)f(p)r(olygon)g(b)r(elongs,)g(based)g(on)h
(its)f(paren)n(tho)r(o)r(d.)330 4770 y(W)-7 b(e)20 b(are)e(in)n
(terested)h(whether)h(a)f(minimal)g(p)r(olygon)g(is)g(a)g(c)n(hild)h
(of)f(eac)n(h)g(of)g(the)h(input)g(p)r(olygons.)330 4869
y(This)27 b(question)f(can)g(b)r(e)h(answ)n(ered)e(b)n(y)i(using)f(the)
h(lab)r(eling)g(of)f(the)h(edges.)36 b(F)-7 b(or)26 b(eac)n(h)g(edge)g
(of)330 4969 y(a)f(minimal)h(p)r(olygon)e(w)n(e)h(compute)h(the)f
(paren)n(tho)r(o)r(d)g(regarding)e(the)j(input)g(p)r(olygons.)35
b(This)330 5069 y(means)30 b(that)i(for)e(b)r(oth)h(input)h(p)r
(olygons)e(w)n(e)g(decide)h(the)h(paren)n(tho)r(o)r(d)e(of)g(the)i
(edges)e(of)h(the)330 5168 y(minimal)d(p)r(olygons)e(dep)r(ending)i(on)
g(their)f(lab)r(eling:)330 5411 y Fc(Shared)344 b Fg(the)28
b(paren)n(tho)r(o)r(d)f(of)g(the)h(edge)f(is)h Fc(P)m(aren)m(tUnkno)m
(wn)p Fg(.)330 5571 y Fc(Outside)308 b Fg(the)20 b(paren)n(tho)r(o)r(d)
g(is)g Fc(P)m(aren)m(tT)-8 b(rue)22 b Fg(if)e(this)h(edge)e(resulted)h
(from)g(the)g(input)962 5670 y(p)r(olygon)27 b(curren)n(tly)f
(considered.)36 b(Otherwise)27 b(it)h(is)f Fc(P)m(aren)m(tF)-8
b(alse)p Fg(.)1809 5919 y(6)p eop
%%Page: 7 7
7 6 bop 330 390 a Fc(Inside)381 b Fg(the)34 b(paren)n(tho)r(o)r(d)e(is)
h Fc(P)m(aren)m(tT)-8 b(rue)35 b Fg(if)f(the)g(edge)e(do)r(es)h(not)h
(result)e(from)962 490 y(the)c(input)f(p)r(olygon)g(curren)n(tly)f
(considered)g(\(and)h(th)n(us)g(is)g(an)g(edge)f(from)962
589 y(the)20 b(other)f(input)i(p)r(olygon.\))33 b(Otherwise)19
b(w)n(e)g(can)h(not)f(conclude)h(an)n(ything)962 689
y(ab)r(out)27 b(the)g(paren)n(tho)r(o)r(d,)f(and)h(the)g(paren)n(tho)r
(o)r(d)g(is)f Fc(P)m(aren)m(tUnkno)m(wn)p Fg(.)330 955
y(This)i(can)f(result)g(in)h(the)g(follo)n(wing)e(paren)n(tho)r(o)r(ds)
h(for)g(the)h(p)r(olygons:)330 1220 y Fc(P)m(aren)m(tUnkno)m(wn)44
b Fg(the)33 b(paren)n(tho)r(o)r(d)f(of)g(all)h(the)g(edges)f(of)g(this)
h(p)r(olygon)f(w)n(ere)g Fc(P)m(aren)m(t-)962 1320 y(Unkno)m(wn)p
Fg(.)330 1486 y Fc(P)m(aren)m(tT)-8 b(rue)160 b Fg(the)27
b(paren)n(tho)r(o)r(d)f(of)h(at)g(least)f(one)g(of)h(its)g(edges)f(w)n
(as)g Fc(P)m(aren)m(tT)-8 b(rue)p Fg(,)29 b(and)962 1586
y(none)e(w)n(as)g Fc(P)m(aren)m(tF)-8 b(alse)p Fg(.)330
1752 y Fc(P)m(aren)m(tF)g(alse)147 b Fg(the)26 b(paren)n(tho)r(o)r(d)f
(of)h(at)f(least)g(one)h(of)f(its)h(edges)f(w)n(as)g
Fc(P)m(aren)m(tF)-8 b(alse)p Fg(,)27 b(and)962 1851 y(none)g(w)n(as)g
Fc(P)m(aren)m(tT)-8 b(rue)p Fg(.)330 2017 y Fc(P)m(aren)m(tMixed)89
b Fg(the)29 b(paren)n(tho)r(o)r(d)f(of)h(at)g(least)g(one)f(of)h(its)g
(edges)f(w)n(as)g Fc(P)m(aren)m(tT)-8 b(rue)31 b Fg(and)962
2117 y(the)d(paren)n(tho)r(o)r(d)f(of)g(at)h(least)f(one)g(of)h(its)f
(edges)g(w)n(as)g Fc(P)m(aren)m(tF)-8 b(alse)p Fg(.)330
2383 y(No)n(w)27 b(w)n(e)g(can)h(classify)e(the)i(p)r(olygons:)431
2648 y(1.)42 b(If)23 b(one)h(of)f(the)h(paren)n(tho)r(o)r(ds)e(is)i
Fc(P)m(aren)m(tMixed)p Fg(,)h(the)f(p)r(olygon)f(is)g(a)g(hole)g(b)r
(et)n(w)n(een)h(the)538 2748 y(t)n(w)n(o)i(input)j(p)r(olygons,)d(and)i
(th)n(us)f(not)h(a)f(mem)n(b)r(er)h(of)f(an)n(y)g(of)g(the)h(sets.)431
2914 y(2.)42 b(If)28 b(b)r(oth)g(paren)n(tho)r(o)r(ds)e(are)h(not)g
Fc(P)m(aren)m(tF)-8 b(alse)29 b Fg(the)f(p)r(olygon)f(is)g(mem)n(b)r
(er)h(of)f Fe(A)19 b Fd(\\)g Fe(B)t Fg(.)431 3080 y(3.)42
b(Else)36 b(one)i(of)f(the)h(paren)n(tho)r(o)r(ds)f(is)g
Fc(P)m(aren)m(tT)-8 b(rue)p Fg(.)69 b(The)38 b(p)r(olygon)f(is)g(part)g
(of)h(that)538 3180 y(p)r(olygon,)26 b(and)i(not)f(of)h(the)g(other.)
330 3554 y Ff(7)135 b(Extensions)46 b(of)f(the)g(algorithm)330
3835 y Fg(In)31 b(the)h(in)n(tro)r(duction)e(some)h(constrain)n(ts)e(w)
n(ere)h(p)r(osed)h(whic)n(h)g(the)h(input)f(p)r(olygons)f(should)330
3935 y(satisfy)-7 b(.)62 b(Ho)n(w)n(ev)n(er,)36 b(with)h(some)f(prepro)
r(cessing)e(of)i(the)g(input)h(these)f(constrain)n(ts)f(can)h(b)r(e)330
4035 y(circum)n(v)n(en)n(ted.)330 4367 y Fh(7.1)112 b(Handling)37
b(coun)m(ter-clo)s(c)m(kwise)f(p)s(olygons)330 4620 y
Fg(The)28 b(detection)g(whether)f(a)h(p)r(olygon)f(is)g(clo)r(c)n
(kwise)g(or)g(coun)n(ter-clo)r(c)n(kwise)e(orien)n(ted)i(can)h(b)r(e)
330 4719 y(done)38 b(b)n(y)g(calculation)g(of)g(its)g(area.)68
b(If)39 b(the)g(area)e(is)h(p)r(ositiv)n(e)g(the)h(p)r(olygon)e(is)h
(clo)r(c)n(kwise)330 4819 y(orien)n(ted.)71 b(If)39 b(the)h(area)e(is)h
(negativ)n(e)f(the)h(p)r(olygon)g(is)g(coun)n(ter-clo)r(c)n(kwise)e
(orien)n(ted.)70 b(By)330 4918 y(rev)n(ersing)20 b(the)i(order)e(of)i
(the)g(v)n(ertices,)g(a)f(coun)n(ter-clo)r(c)n(kwise)f(orien)n(ted)g(p)
r(olygon)h(will)h(b)r(ecome)330 5018 y(clo)r(c)n(kwise)30
b(orien)n(ted.)47 b(Suc)n(h)32 b(a)e(c)n(hec)n(k,)i(and)f(p)r(ossible)g
(rev)n(ersing,)f(can)h(b)r(e)g(done)g(at)h(the)f(v)n(ery)330
5118 y(b)r(eginning)d(of)f(the)h(pro)r(cess.)1809 5919
y(7)p eop
%%Page: 8 8
8 7 bop 330 390 a Fh(7.2)112 b(Handling)37 b(p)s(olygons)g(with)g
(holes)330 643 y Fg(A)d(p)r(olygon)f(with)i(a)e(hole)h
Fe(A)g Fg(can)f(seen)h(as)f(p)r(olygon)g Fe(A)2130 655
y Fb(c)2198 643 y Fg(with)i(a)e(hole)h Fe(A)2713 655
y Fb(h)2790 643 y Fg(suc)n(h)f(that)i Fe(A)e Fg(=)330
743 y Fe(A)392 755 y Fb(c)446 743 y Fd(n)19 b Fe(A)569
755 y Fb(h)612 743 y Fg(.)41 b(W)-7 b(e)30 b(can)f(use)g(the)g
(algorithm)f(describ)r(ed)h(ab)r(o)n(v)n(e)f(to)h(calculate)g
Fe(A)2763 755 y Fb(c)2816 743 y Fd(n)19 b Fe(A)2939 755
y Fb(h)2982 743 y Fg(,)30 b(whic)n(h)f(is)330 842 y(a)e(set)h(of)f(p)r
(olygons.)330 1042 y(Th)n(us)c(to)f(clip)i(a)e(p)r(olygon)g
Fe(B)27 b Fg(with)d(a)e(p)r(olygon)g(with)h(a)g(hole)f
Fe(A)i Fg(w)n(e)e(ha)n(v)n(e)g(to)h(clip)g Fe(B)k Fg(with)c(ev)n(ery)
330 1141 y(p)r(olygon)k(in)h(the)f(set)h Fe(A)1075 1153
y Fb(c)1128 1141 y Fd(n)18 b Fe(A)1250 1153 y Fb(h)1293
1141 y Fg(.)330 1473 y Fh(7.3)112 b(Handling)37 b(self-in)m(tersecting)
e(p)s(olygons)330 1726 y Fg(With)28 b(a)e(self-in)n(tersecting)f(p)r
(olygon)h(w)n(e)h(can)f(calculate)g(the)h(in)n(tersection)f(p)r(oin)n
(ts)g(with)i(itself)330 1826 y(similar)41 b(to)g(section)g(3.)77
b(This)41 b(results)g(in)h(an)f(augmen)n(ted)f(p)r(olygon,)k(of)e(whic)
n(h)f(minimal)330 1925 y(p)r(olygons)26 b(can)i(b)r(e)g(calculated)f
(similar)f(to)i(the)g(pro)r(cedure)f(giv)n(en)f(in)i(section)f(5.)330
2125 y(The)j(set)f(of)h(p)r(olygons)f(retriev)n(ed)f(b)n(y)h(this)h
(pro)r(cedure)f(are)g(not)h(self)f(in)n(tersecting,)h(and)f(do)r(es)330
2224 y(co)n(v)n(er)24 b(the)i(input)g(p)r(olygon)e(including)i
(implicit)h(holes.)35 b(No)26 b(easy)e(w)n(a)n(y)g(exists)i(\(to)f(the)
h(kno)n(wl-)330 2324 y(edge)h(of)h(the)g(author\))f(to)g(detect)h(whic)
n(h)g(of)f(these)h(p)r(olygons)e(are)h(implicit)h(holes.)330
2523 y(This)h(means)g(that)g(input)h(p)r(olygons)e(whic)n(h)h(are)f
(self)i(in)n(tersecting)e(but)i(do)e(not)i(include)f(im-)330
2623 y(plicit)f(holes)f(can)g(b)r(e)h(used)g(as)f(input)h(to)g(the)g
(algorithm.)330 2997 y Ff(8)135 b(Computational)47 b(exp)t(ense)330
3278 y Fg(The)31 b(w)n(orst)g(case)f(complexit)n(y)h(of)g(the)h(p)r
(olygon)f(clipping)g(problem)g(is)g Fe(O)r Fg(\()p Fe(nm)p
Fg(\),)j(with)d Fe(n)h Fg(the)330 3378 y(n)n(um)n(b)r(er)27
b(of)h(v)n(ertices)e(in)i(p)r(olygon)f Fe(A)h Fg(and)f
Fe(m)h Fg(the)g(n)n(um)n(b)r(er)f(of)h(v)n(ertices)e(in)i(p)r(olygon)f
Fe(B)t Fg(.)37 b(This)330 3478 y(complexit)n(y)e(is)g(reac)n(hed)g
(when)h(ev)n(ery)e(edge)h(of)h(the)f(\014rst)h(p)r(olygon)e(in)n
(tersects)h(with)h(ev)n(ery)330 3577 y(edge)31 b(of)h(the)f(other)g(p)r
(olygon.)48 b(An)32 b(example)f(of)h(this)g(can)f(b)r(e)h(seen)f(in)h
(\014gure)f(5,)h(where)f(the)330 3677 y(n)n(um)n(b)r(er)i(of)g(p)r
(olygons)f(in)i(the)g(set)f Fe(A)23 b Fd(\\)f Fe(B)38
b Fg(equals)32 b Fe(nm=)p Fg(4.)53 b(Ho)n(w)n(ev)n(er,)33
b(for)g(other)f(cases)h(the)330 3777 y(n)n(um)n(b)r(er)27
b(of)h(output)g(p)r(olygons)e(is)i(smaller,)f(with)h(a)f(minim)n(um)h
(of)g(1.)330 3976 y(The)k(complexit)n(y)g(of)g(the)h(algorithm)e
(describ)r(ed)h(in)g(this)h(pap)r(er)e(alw)n(a)n(ys)g(is)h
Fe(O)r Fg(\()p Fe(nm)p Fg(\))h(for)f(the)330 4075 y(calculations)e(of)i
(the)f(in)n(tersections)g(and)g(the)g(lab)r(eling)h(of)f(the)h(edges,)f
(ev)n(en)g(in)h(cases)e(when)330 4175 y(the)i(n)n(um)n(b)r(er)g(of)g
(output)g(p)r(olygons)f(is)g(m)n(uc)n(h)h(smaller)f(then)h
Fe(nm)p Fg(.)50 b(The)32 b(other)f(parts)g(of)h(the)330
4275 y(algorithm)26 b(ha)n(v)n(e)h(lo)n(w)n(er)f(complexit)n(y)-7
b(.)330 4607 y Fh(8.1)112 b(Complexit)m(y)35 b(of)j(in)m(tersection)d
(calculation)330 4860 y Fg(Ev)n(ery)30 b(edge)i(in)g(the)g(\014rst)g
(input)h(p)r(olygon)e(can)g(in)n(tersect)h(with)g(ev)n(ery)f(edge)g(in)
h(the)h(second)330 4959 y(input)c(p)r(olygon.)39 b(This)29
b(results)f(in)h Fe(O)r Fg(\()p Fe(nm)p Fg(\))g(complexit)n(y)-7
b(.)40 b(If)29 b(space)e(partitioning)h(tec)n(hniques)330
5059 y(are)e(used)g(not)g(ev)n(ery)g(edge)g(of)g(one)g(p)r(olygon)g
(has)g(b)r(e)h(c)n(hec)n(k)n(ed)e(to)h(all)h(the)g(edges)e(of)i(the)g
(other)330 5158 y(p)r(olygon,)22 b(but)h(only)f(those)f(who)h(are)f(lo)
r(cated)h(in)h(the)f(same)g(area)e(elemen)n(t.)35 b(This)22
b(could)g(result)330 5258 y(in)32 b Fe(O)r Fg(\()p Fe(n)23
b Fg(+)e Fe(m)p Fg(\))32 b(complexit)n(y)f(for)h(appropriate)e(space)i
(partitioning)f(tec)n(hniques)h(and)g(simple)330 5358
y(problems.)1809 5919 y(8)p eop
%%Page: 9 9
9 8 bop 649 2752 a @beginspecial 0 @llx 0 @lly 306 @urx
306 @ury 2834 @rwi @setspecial
%%BeginDocument: figures/complexity_edit.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
/col8 {.68 .85 .9 setrgbcolor} bind def
/col9 {0 .39 0 setrgbcolor} bind def
/col10 {.65 .17 .17 setrgbcolor} bind def
/col11 {1 .51 0 setrgbcolor} bind def
/col12 {.63 .13 .94 setrgbcolor} bind def
/col13 {1 .75 .8 setrgbcolor} bind def
/col14 {.7 .13 .13 setrgbcolor} bind def
/col15 {1 .84 0 setrgbcolor} bind def
	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-18.0 360.0 translate 0.900 -0.900 scale
% Polyline
n 119 59 m 139 399 l  159 119 l  179 399 l  199 119 l  219 399 l 
 239 119 l  259 399 l  279 59 l  259 319 l  239 59 l 
 219 319 l  199 59 l  179 319 l  159 59 l  139 319 l 
 119 59 l gs 0.75 setgray fill gr
% Polyline
n 359 139 m 19 159 l  299 179 l  19 199 l  299 219 l  19 239 l 
 299 259 l  19 279 l  359 299 l  99 279 l  359 259 l 
 99 239 l  359 219 l  99 199 l  359 179 l  99 159 l 
 359 139 l gs 0.50 setgray fill gr
 n 124.51724137931032033	152.79310344827587187 m 
124.51724137931032033	152.79310344827587187 l 
124.76576576576576372	157.01801801801801162 l 
126.52941176470588402	156.8823529411764639 l 
126.20720720720720465	152.69369369369368883 l 
124.51724137931032033	152.79310344827587187 l gs 0.00 setgray fill gr 
 n 125	161 m 
125	161 l 
125.32911392405064532	166.59493670886075734 l 
127.28729281767955683	166.73480662983425304 l 
126.8571428571428612	161.1428571428571388 l 
125	161 l gs 0.00 setgray fill gr 
 n 126.78242677824266593	191.3012552301255198 m 
126.78242677824266593	191.3012552301255198 l 
127.10810810810811233	196.83783783783783861 l 
129.58823529411765207	196.64705882352942012 l 
129.16393442622950261	191.13114754098359072 l 
126.78242677824266593	191.3012552301255198 l gs 0.00 setgray fill gr 
 n 127.36363636363637397	201.18181818181818699 m 
127.36363636363637397	201.18181818181818699 l 
127.69198312236285631	206.76371308016877038 l 
130.38121546961326658	206.95580110497238024 l 
129.95238095238096321	201.3809523809523796 l 
127.36363636363637397	201.18181818181818699 l gs 0.00 setgray fill gr 
 n 129.12552301255232123	231.13389121338911991 m 
129.12552301255232123	231.13389121338911991 l 
129.45045045045046095	236.6576576576576656 l 
132.64705882352942012	236.41176470588237635 l 
132.22404371584698879	230.91256830601093952 l 
129.12552301255232123	231.13389121338911991 l gs 0.00 setgray fill gr 
 n 129.72727272727271952	241.36363636363637397 m 
129.72727272727271952	241.36363636363637397 l 
130.0548523206750815	246.93248945147678342 l 
133.47513812154696211	247.17679558011047902 l 
133.04761904761903679	241.6190476190476204 l 
129.72727272727271952	241.36363636363637397 l gs 0.00 setgray fill gr 
 n 131.46861924686194811	270.9665271966526916 m 
131.46861924686194811	270.9665271966526916 l 
131.79279279279279535	276.47747747747746416 l 
135.70588235294118817	276.17647058823524731 l 
135.28415300546447497	270.69398907103823149 l 
131.46861924686194811	270.9665271966526916 l gs 0.00 setgray fill gr 
 n 132.09090909090909349	281.54545454545456096 m 
132.09090909090909349	281.54545454545456096 l 
132.33333333333331439	285.66666666666668561 l 
136.45454545454546746	285.90909090909093493 l 
136.1428571428571388	281.85714285714288962 l 
132.09090909090909349	281.54545454545456096 l gs 0.00 setgray fill gr 
 n 147.03347280334727998	286.53138075313808031 m 
147.03347280334727998	286.53138075313808031 l 
147.30601092896176851	282.71584699453552503 l 
141.82352941176469585	282.29411764705884025 l 
141.52252252252253584	286.20720720720720465 l 
147.03347280334727998	286.53138075313808031 l gs 0.00 setgray fill gr 
 n 147.83977900552486062	275.24309392265189445 m 
147.83977900552486062	275.24309392265189445 l 
148.2307692307692264	269.76923076923071676 l 
142.75690607734807713	270.16022099447508253 l 
142.33333333333334281	275.66666666666662877 l 
147.83977900552486062	275.24309392265189445 l gs 0.00 setgray fill gr 
 n 149.76142131979696615	248.3401015228426445 m 
149.76142131979696615	248.3401015228426445 l 
150.14754098360654666	242.93442622950820464 l 
144.8823529411764639	242.52941176470588402 l 
144.46448087431693352	247.96174863387977894 l 
149.76142131979696615	248.3401015228426445 l gs 0.00 setgray fill gr 
 n 150.71270718232042896	235.02209944751382409 m 
150.71270718232042896	235.02209944751382409 l 
151.10256410256411641	229.5641025641025692 l 
145.85082872928177267	229.93922651933701218 l 
145.42857142857141639	235.42857142857144481 l 
150.71270718232042896	235.02209944751382409 l gs 0.00 setgray fill gr 
 n 152.60406091370558102	208.54314720812180894 m 
152.60406091370558102	208.54314720812180894 l 
152.98907103825138165	203.15300546448088426 l 
147.94117647058823195	202.76470588235295622 l 
147.52459016393441971	208.18032786885243013 l 
152.60406091370558102	208.54314720812180894 l gs 0.00 setgray fill gr 
 n 153.58563535911602571	194.80110497237569689 m 
153.58563535911602571	194.80110497237569689 l 
153.97435897435900642	189.3589743589743648 l 
148.9447513812154682	189.7182320441989134 l 
148.5238095238095184	195.19047619047620401 l 
153.58563535911602571	194.80110497237569689 l gs 0.00 setgray fill gr 
 n 155.44670050761422431	168.74619289340100181 m 
155.44670050761422431	168.74619289340100181 l 
155.8306010928961598	163.37158469945356387 l 
151	163 l 
150.58469945355190589	168.39890710382513817 l 
155.44670050761422431	168.74619289340100181 l gs 0.00 setgray fill gr 
 n 156.45856353591159404	154.58011049723756969 m 
156.45856353591159404	154.58011049723756969 l 
156.72151898734179554	150.89873417721520354 l 
151.90909090909090651	151.18181818181818699 l 
151.6190476190476204	154.95238095238096321 l 
156.45856353591159404	154.58011049723756969 l gs 0.00 setgray fill gr 
 n 161.25941422594144115	150.63179916317992024 m 
161.25941422594144115	150.63179916317992024 l 
161.51366120218580136	154.19125683060110532 l 
166.29411764705881183	153.82352941176472427 l 
166.02702702702703164	150.35135135135135442 l 
161.25941422594144115	150.63179916317992024 l gs 0.00 setgray fill gr 
 n 162.20441988950275913	163.86187845303868471 m 
162.20441988950275913	163.86187845303868471 l 
162.5897435897435912	169.25641025641024839 l 
167.50828729281766982	169.60773480662982138 l 
167.09523809523810201	164.2380952380952408 l 
162.20441988950275913	163.86187845303868471 l gs 0.00 setgray fill gr 
 n 163.97461928934009734	188.64467005076141959 m 
163.97461928934009734	188.64467005076141959 l 
164.35519125683060793	193.97267759562842571 l 
169.35294117647057988	193.58823529411765207 l 
168.94535519125682299	188.28961748633878415 l 
163.97461928934009734	188.64467005076141959 l gs 0.00 setgray fill gr 
 n 165.07734806629832747	204.08287292817681191 m 
165.07734806629832747	204.08287292817681191 l 
165.46153846153845279	209.46153846153845279 l 
170.60220994475139378	209.82872928176794858 l 
170.19047619047620401	204.4761904761904816 l 
165.07734806629832747	204.08287292817681191 l gs 0.00 setgray fill gr 
 n 166.81725888324874063	228.44162436548222672 m 
166.81725888324874063	228.44162436548222672 l 
167.1967213114754145	233.75409836065574609 l 
172.41176470588234793	233.3529411764706083 l 
172.00546448087430917	228.07103825136610453 l 
166.81725888324874063	228.44162436548222672 l gs 0.00 setgray fill gr 
 n 167.95027624309392422	244.30386740331493911 m 
167.95027624309392422	244.30386740331493911 l 
168.33333333333334281	249.66666666666665719 l 
173.69613259668508931	250.04972375690607578 l 
173.28571428571427759	244.71428571428572241 l 
167.95027624309392422	244.30386740331493911 l gs 0.00 setgray fill gr 
 n 169.65989847715738392	268.23857868020297701 m 
169.65989847715738392	268.23857868020297701 l 
170.03825136612022106	273.53551912568303806 l 
175.47058823529411598	273.1176470588235361 l 
175.06557377049179536	267.85245901639336807 l 
169.65989847715738392	268.23857868020297701 l gs 0.00 setgray fill gr 
 n 170.82320441988952098	284.52486187845306631 m 
170.82320441988952098	284.52486187845306631 l 
171.06751054852321658	287.9451476793249185 l 
176.63636363636362603	288.2727272727273089 l 
176.3809523809523796	284.95238095238096321 l 
170.82320441988952098	284.52486187845306631 l gs 0.00 setgray fill gr 
 n 186.86610878661088009	288.87447698744773561 m 
186.86610878661088009	288.87447698744773561 l 
187.08743169398906048	285.77595628415303963 l 
181.58823529411765207	285.3529411764706083 l 
181.3423423423423344	288.54954954954956747 l 
186.86610878661088009	288.87447698744773561 l gs 0.00 setgray fill gr 
 n 188.06077348066298782	272.14917127071822733 m 
188.06077348066298782	272.14917127071822733 l 
188.43589743589740237	266.89743589743585517 l 
182.97790055248620433	267.28729281767948578 l 
182.57142857142855519	272.57142857142855519 l 
188.06077348066298782	272.14917127071822733 l gs 0.00 setgray fill gr 
 n 189.55837563451777328	251.18274111675125937 m 
189.55837563451777328	251.18274111675125937 l 
189.92896174863389547	245.99453551912569083 l 
184.64705882352942012	245.58823529411765207 l 
184.24590163934425391	250.8032786885245855 l 
189.55837563451777328	251.18274111675125937 l gs 0.00 setgray fill gr 
 n 190.93370165745855616	231.92817679558012856 m 
190.93370165745855616	231.92817679558012856 l 
191.30769230769232081	226.69230769230767919 l 
186.07182320441989987	227.06629834254141542 l 
185.66666666666665719	232.33333333333334281 l 
190.93370165745855616	231.92817679558012856 l gs 0.00 setgray fill gr 
 n 192.40101522842638815	211.38578680203045224 m 
192.40101522842638815	211.38578680203045224 l 
192.77049180327867361	206.21311475409837044 l 
187.70588235294118817	205.82352941176472427 l 
187.30601092896174009	211.02185792349726512 l 
192.40101522842638815	211.38578680203045224 l gs 0.00 setgray fill gr 
 n 193.80662983425415291	191.70718232044200136 m 
193.80662983425415291	191.70718232044200136 l 
194.1794871794871824	186.48717948717947479 l 
189.1657458563535954	186.84530386740331664 l 
188.7619047619047592	192.09523809523810201 l 
193.80662983425415291	191.70718232044200136 l gs 0.00 setgray fill gr 
 n 195.24365482233503144	171.5888324873096451 m 
195.24365482233503144	171.5888324873096451 l 
195.61202185792350861	166.43169398907105005 l 
190.7647058823529278	166.05882352941176805 l 
190.36612021857922628	171.24043715846994473 l 
195.24365482233503144	171.5888324873096451 l gs 0.00 setgray fill gr 
 n 196.67955801104972124	151.48618784530387416 m 
196.67955801104972124	151.48618784530387416 l 
196.89029535864980858	148.53586497890296414 l 
192.09090909090909349	148.81818181818184144 l 
191.8571428571428612	151.8571428571428612 l 
196.67955801104972124	151.48618784530387416 l gs 0.00 setgray fill gr 
 n 201.09205020920501283	148.28870292887029336 m 
201.09205020920501283	148.28870292887029336 l 
201.29508196721312174	151.13114754098361914 l 
206.05882352941176805	150.76470588235295622 l 
205.84684684684685863	148.00900900900902002 l 
201.09205020920501283	148.28870292887029336 l gs 0.00 setgray fill gr 
 n 202.42541436464088633	166.95580110497238024 m 
202.42541436464088633	166.95580110497238024 l 
202.7948717948717956	172.12820512820513841 l 
207.72928176795579702	172.48066298342541813 l 
207.33333333333334281	167.33333333333334281 l 
202.42541436464088633	166.95580110497238024 l gs 0.00 setgray fill gr 
 n 203.77157360406090447	185.8020304568527763 m 
203.77157360406090447	185.8020304568527763 l 
204.13661202185792831	190.91256830601093952 l 
209.1176470588235361	190.52941176470588402 l 
208.72677595628414338	185.44808743169397758 l 
203.77157360406090447	185.8020304568527763 l gs 0.00 setgray fill gr 
 n 205.29834254143645467	207.17679558011050744 m 
205.29834254143645467	207.17679558011050744 l 
205.66666666666665719	212.33333333333334281 l 
210.82320441988949256	212.70165745856354533 l 
210.42857142857141639	207.57142857142858361 l 
205.29834254143645467	207.17679558011050744 l gs 0.00 setgray fill gr 
 n 206.61421319796954776	225.59898477157358343 m 
206.61421319796954776	225.59898477157358343 l 
206.97814207650273488	230.69398907103825991 l 
212.17647058823530415	230.29411764705884025 l 
211.78688524590162956	225.22950819672129796 l 
206.61421319796954776	225.59898477157358343 l gs 0.00 setgray fill gr 
 n 208.171270718232023	247.39779005524863464 m 
208.171270718232023	247.39779005524863464 l 
208.53846153846154721	252.53846153846151878 l 
213.91712707182321651	252.92265193370164411 l 
213.5238095238095184	247.80952380952382441 l 
208.171270718232023	247.39779005524863464 l gs 0.00 setgray fill gr 
 n 209.45685279187819106	265.39593908629439056 m 
209.45685279187819106	265.39593908629439056 l 
209.81967213114754145	270.47540983606558029 l 
215.2352941176470722	270.05882352941176805 l 
214.84699453551911574	265.01092896174861835 l 
209.45685279187819106	265.39593908629439056 l gs 0.00 setgray fill gr 
 n 211.04419889502761976	287.61878453038679027 m 
211.04419889502761976	287.61878453038679027 l 
211.23628691983122962	290.3080168776371579 l 
216.81818181818181301	290.63636363636368287 l 
216.6190476190476204	288.04761904761909364 l 
211.04419889502761976	287.61878453038679027 l gs 0.00 setgray fill gr 
 n 226.6987447698744802	291.21757322175733407 m 
226.6987447698744802	291.21757322175733407 l 
226.86885245901640928	288.83606557377055424 l 
221.35294117647057988	288.41176470588243319 l 
221.16216216216216139	290.8918918918919303 l 
226.6987447698744802	291.21757322175733407 l gs 0.00 setgray fill gr 
 n 228.28176795580111502	269.05524861878456022 m 
228.28176795580111502	269.05524861878456022 l 
228.6410256410256352	264.02564102564099358 l 
223.19889502762430311	264.41436464088394587 l 
222.80952380952379599	269.4761904761904816 l 
228.28176795580111502	269.05524861878456022 l gs 0.00 setgray fill gr 
 n 229.35532994923858041	254.02538071065987424 m 
229.35532994923858041	254.02538071065987424 l 
229.71038251366118743	249.05464480874317701 l 
224.41176470588234793	248.64705882352942012 l 
224.02732240437160272	253.64480874316936365 l 
229.35532994923858041	254.02538071065987424 l gs 0.00 setgray fill gr 
 n 231.15469613259668336	228.8342541436464046 m 
231.15469613259668336	228.8342541436464046 l 
231.51282051282049679	223.8205128205128176 l 
226.29281767955799864	224.19337016574584709 l 
225.90476190476192642	229.2380952380952408 l 
231.15469613259668336	228.8342541436464046 l gs 0.00 setgray fill gr 
 n 232.1979695431472237	214.22842639593909553 m 
232.1979695431472237	214.22842639593909553 l 
232.55191256830602242	209.27322404371585662 l 
227.47058823529411598	208.88235294117649232 l 
227.08743169398906048	213.86338797814207169 l 
232.1979695431472237	214.22842639593909553 l gs 0.00 setgray fill gr 
 n 234.02762430939225169	188.61325966850830582 m 
234.02762430939225169	188.61325966850830582 l 
234.3846153846153868	183.6153846153846132 l 
229.3867403314917226	183.97237569060771989 l 
229	189.00000000000002842 l 
234.02762430939225169	188.61325966850830582 l gs 0.00 setgray fill gr 
 n 235.04060913705583857	174.43147208121828839 m 
235.04060913705583857	174.43147208121828839 l 
235.39344262295082899	169.49180327868853624 l 
230.52941176470588402	169.1176470588235361 l 
230.14754098360657508	174.08196721311477972 l 
235.04060913705583857	174.43147208121828839 l gs 0.00 setgray fill gr 
 n 236.90055248618784844	148.39226519337017862 m 
236.90055248618784844	148.39226519337017862 l 
237.0590717299577932	146.17299578059072473 l 
232.27272727272728048	146.45454545454546746 l 
232.09523809523810201	148.76190476190478762 l 
236.90055248618784844	148.39226519337017862 l gs 0.00 setgray fill gr 
 n 240.92468619246861294	145.94560669456066648 m 
240.92468619246861294	145.94560669456066648 l 
241.07650273224044213	148.07103825136613295 l 
245.82352941176469585	147.70588235294118817 l 
245.66666666666665719	145.66666666666665719 l 
240.92468619246861294	145.94560669456066648 l gs 0.00 setgray fill gr 
 n 242.64640883977901353	170.04972375690607578 m 
242.64640883977901353	170.04972375690607578 l 
243	175 l 
247.95027624309392422	175.35359116022098647 l 
247.57142857142858361	170.42857142857141639 l 
242.64640883977901353	170.04972375690607578 l gs 0.00 setgray fill gr 
 n 243.56852791878171161	182.95939086294416143 m 
243.56852791878171161	182.95939086294416143 l 
243.9180327868852487	187.85245901639345334 l 
248.8823529411764639	187.4705882352941444 l 
248.50819672131146376	182.60655737704917101 l 
243.56852791878171161	182.95939086294416143 l gs 0.00 setgray fill gr 
 n 245.51933701657458187	210.27071823204420298 m 
245.51933701657458187	210.27071823204420298 l 
245.87179487179486159	215.2051282051282044 l 
251.04419889502761976	215.57458563535911367 l 
250.66666666666665719	210.66666666666668561 l 
245.51933701657458187	210.27071823204420298 l gs 0.00 setgray fill gr 
 n 246.4111675126903549	222.75634517766496856 m 
246.4111675126903549	222.75634517766496856 l 
246.75956284153005527	227.63387978142077372 l 
251.94117647058823195	227.2352941176470722 l 
251.56830601092894995	222.38797814207649139 l 
246.4111675126903549	222.75634517766496856 l gs 0.00 setgray fill gr 
 n 248.39226519337017862	250.49171270718233018 m 
248.39226519337017862	250.49171270718233018 l 
248.74358974358975161	255.41025641025638038 l 
254.13812154696131529	255.79558011049721244 l 
253.7619047619047592	250.90476190476192642 l 
248.39226519337017862	250.49171270718233018 l gs 0.00 setgray fill gr 
 n 249.25380710659896977	262.55329949238574727 m 
249.25380710659896977	262.55329949238574727 l 
249.60109289617486183	267.41530054644812253 l 
255	267.00000000000005684 l 
254.62841530054643613	262.16939890710375494 l 
249.25380710659896977	262.55329949238574727 l gs 0.00 setgray fill gr 
 n 251.26519337016574696	290.71270718232051422 m 
251.26519337016574696	290.71270718232051422 l 
251.40506329113924266	292.67088607594939731 l 
257	293.00000000000005684 l 
256.85714285714288962	291.14285714285722406 l 
251.26519337016574696	290.71270718232051422 l gs 0.00 setgray fill gr 
 n 265.20689655172412813	293.4827586206897081 m 
265.20689655172412813	293.4827586206897081 l 
265.30630630630628275	291.7927927927928522 l 
261.1176470588235361	291.47058823529420124 l 
260.98198198198195996	293.23423423423429313 l 
265.20689655172412813	293.4827586206897081 l gs 0.00 setgray fill gr 
 n 266.81818181818181301	266.09090909090912191 m 
266.81818181818181301	266.09090909090912191 l 
267.10126582278479646	261.27848101265817604 l 
263.41988950276243031	261.54143646408834911 l 
263.04761904761903679	266.38095238095240802 l 
266.81818181818181301	266.09090909090912191 l gs 0.00 setgray fill gr 
 n 267.36820083682010818	256.74058577405855885 m 
267.36820083682010818	256.74058577405855885 l 
267.64864864864864558	251.97297297297296836 l 
264.17647058823530415	251.70588235294118817 l 
263.80874316939889468	256.48633879781419864 l 
267.36820083682010818	256.74058577405855885 l gs 0.00 setgray fill gr 
 n 269.18181818181818699	225.90909090909090651 m 
269.18181818181818699	225.90909090909090651 l 
269.46413502109703586	221.10970464135021984 l 
266.51381215469615427	221.32044198895027876 l 
266.14285714285716722	226.1428571428571388 l 
269.18181818181818699	225.90909090909090651 l gs 0.00 setgray fill gr 
 n 269.71129707112970664	216.90794979079498717 m 
269.71129707112970664	216.90794979079498717 l 
269.9909909909910084	212.1531531531531698 l 
267.2352941176470722	211.94117647058826037 l 
266.86885245901640928	216.70491803278687826 l 
269.71129707112970664	216.90794979079498717 l gs 0.00 setgray fill gr 
 n 271.54545454545456096	185.72727272727274794 m 
271.54545454545456096	185.72727272727274794 l 
271.82700421940927527	180.9409282700422068 l 
269.60773480662982138	181.09944751381215156 l 
269.2380952380952408	185.90476190476192642 l 
271.54545454545456096	185.72727272727274794 l gs 0.00 setgray fill gr 
 n 272.05439330543936194	177.07531380753138706 m 
272.05439330543936194	177.07531380753138706 l 
272.33333333333337123	172.33333333333334281 l 
270.29411764705884025	172.17647058823530415 l 
269.92896174863386705	176.92349726775955787 l 
272.05439330543936194	177.07531380753138706 l gs 0.00 setgray fill gr 
 n 273.90909090909093493	145.54545454545456096 m 
273.90909090909093493	145.54545454545456096 l 
274	144 l 
272.45454545454543904	144.09090909090909349 l 
272.33333333333331439	145.66666666666668561 l 
273.90909090909093493	145.54545454545456096 l gs 0.00 setgray fill gr 
$F2psEnd
%%EndDocument
 @endspecial 330 3018 a Fg(Figure)30 b(5:)43 b(An)31
b(example)f(with)h(complexit)n(y)f Fe(O)r Fg(\()p Fe(nm)p
Fg(\):)44 b(the)31 b(n)n(um)n(b)r(er)f(of)h(p)r(olygons)e(in)i
Fe(A)21 b Fd(\\)g Fe(B)330 3118 y Fg(\(blac)n(k)j(in)h(the)g
(\014gure\))f(equals)g Fe(nm=)p Fg(4.)35 b(This)25 b(example)f(scales)g
(up)h(b)n(y)f(adding)g(more)g(zig-zags.)330 3388 y Fh(8.2)112
b(Complexit)m(y)35 b(of)j(lab)s(eling)e(edges)330 3640
y Fg(The)31 b(algorithm)f(prop)r(osed)g(in)i(section)f(4)f(mak)n(es)h
(use)g(of)g(is)p 2257 3640 25 4 v 30 w(inside\(\))g(to)g(lab)r(el)h
(edges)e(whic)n(h)330 3740 y(are)i(either)i(completely)f(outside)g(or)g
(completely)g(inside)h(the)f(other)g(p)r(olygon.)54 b(This)33
b(c)n(hec)n(k)330 3840 y(do)r(es)27 b(ha)n(v)n(e)g(to)g(test)h(against)
e(all)i(edges)f(of)g(the)h(other)f(p)r(olygon)g(for)g(conca)n(v)n(e)f
(p)r(olygons.)330 4039 y(Ho)n(w)n(ev)n(er,)g(this)i(c)n(hec)n(k)f(is)h
(not)f(strictly)h(necessary)-7 b(.)36 b(W)-7 b(e)28 b(already)e(kno)n
(w)h(that)h(the)g(p)r(olygon)f(is)330 4139 y(not)32 b(completely)g
(inside)g(or)f(outside)g(the)i(other)e(p)r(olygon,)h(so)f(there)h(m)n
(ust)g(b)r(e)g(at)g(least)f(one)330 4238 y(in)n(tersection)36
b(p)r(oin)n(t)g(with)h(the)g(other)f(p)r(olygon.)63 b(If)36
b(w)n(e)h(classify)e(the)i(edges)f(connected)g(to)330
4338 y(this)31 b(v)n(ertex,)f(w)n(e)f(do)h(not)h(need)f(to)g(consider)g
(the)g(edges)g(completely)g(inside)g(or)g(outside)g(the)330
4437 y(other)f(p)r(olygon.)41 b(W)-7 b(e)29 b(simply)g(can)g(lab)r(el)h
(them)f(as)g Fc(Unkno)m(wn)p Fg(,)i(and)e(relying)f(on)h(the)h(edges)
330 4537 y(connected)g(to)g(the)h(in)n(tersection)e(p)r(oin)n(ts)h(to)g
(get)g(the)h(correct)e(p)r(olygon)g(lab)r(eling.)45 b(This)30
b(will)330 4637 y(result)d(in)h(the)g(follo)n(wing)f(algorithm)f
(instead)i(of)f(algorithm)g(2:)330 4902 y Fc(if)g Fg(edge.\014rst)p
747 4902 V 29 w(v)n(ertex.is)p 1080 4902 V 29 w(connected\(\))h
Fc(then)413 5002 y Fg(lab)r(el)p 591 5002 V 30 w(angle\(edge,)e
(edge.\014rst)p 1383 5002 V 29 w(v)n(ertex.connect\))330
5102 y Fc(else)g(if)i Fg(edge.second)p 1024 5102 V 28
w(v)n(ertex.is)p 1356 5102 V 29 w(connected\(\))g Fc(then)413
5201 y Fg(lab)r(el)p 591 5201 V 30 w(angle\(edge,)e(edge.second)p
1480 5201 V 29 w(v)n(ertex.connect\))330 5301 y Fc(else)413
5400 y Fg(edge.lab)r(el)h(=)g(Unkno)n(wn)875 5500 y Fc(Algorithm)j(4:)
36 b Fg(Impro)n(v)n(ed)26 b(v)n(ersion)g(of)i(stable)f(algorithm)1809
5919 y(9)p eop
%%Page: 10 10
10 9 bop 330 390 a Fg(When)25 b(making)e(decisions)g(ab)r(out)h(the)g
(paren)n(tho)r(o)r(d)f(of)h(the)g(edges)g(as)f(describ)r(ed)h(in)g
(section)f(6)330 490 y(w)n(e)18 b(use)h(the)g(rule)f(that)h(an)g(edge)f
(lab)r(el)g Fc(Unkno)m(wn)i Fg(giv)n(es)e Fc(P)m(aren)m(tUnkno)m(wn)j
Fg(as)d(paren)n(tho)r(o)r(d)330 589 y(for)27 b(this)h(edge.)36
b(This)28 b(leads)f(to)g(an)h(algorithm)e(with)i(complexit)n(y)f
Fe(O)r Fg(\()p Fe(m)20 b Fg(+)e Fe(n)p Fg(\))330 964
y Ff(Ac)l(kno)l(wledgmen)l(ts)330 1245 y Fg(Supp)r(ort)31
b(from)g(SION)g(and)g(NW)n(O)g(is)g(gratefully)f(ac)n(kno)n(wledged.)45
b(Muc)n(h)32 b(of)f(the)g(w)n(ork)f(has)330 1345 y(b)r(een)23
b(p)r(erformed)e(at)h(the)h(Measuremen)n(t)e(lab)r(oratory)-7
b(,)21 b(Departmen)n(t)i(of)f(Electrical)f(Engineer-)330
1444 y(ing,)27 b(Univ)n(ersit)n(y)g(of)h(Tw)n(en)n(te.)330
1819 y Ff(References)330 2034 y Fg(1.)41 b(Klamer)20
b(Sc)n(h)n(utte,)j(Kno)n(wledge)d(Based)g(Recognition)h(of)g(Man-Made)g
(Ob)5 b(jects,)22 b Fa(PhD)i(The-)436 2133 y(sis)p Fg(,)k(Univ)n(ersit)
n(y)f(of)g(Tw)n(en)n(te,)h(ISBN90-9006902-X,)23 b(1994)330
2299 y(2.)41 b(Stuart)31 b(Sec)n(hrest)f(and)h(Donald)g(P)-7
b(.)31 b(Green)n(b)r(erg,)g(A)g(visible)g(p)r(olygon)f(reconstruction)g
(al-)436 2399 y(gorithm,)d Fa(A)n(CM:)k(Computer)f(Gr)l(aphics)p
Fg(,)f Fc(15)p Fg(,)f(1981,)d(17-27)330 2565 y(3.)41
b(Bala)27 b(R.)i(V)-7 b(atti,)29 b(A)g(Generic)f(Solution)g(to)g(P)n
(olygon)f(Clipping,)h Fa(Communic)l(ations)j(of)h(the)436
2665 y(A)n(CM)p Fg(,)c Fc(25)p Fg(,)f(1992,)f(58-63)330
2831 y(4.)41 b(Kevin)34 b(W)-7 b(eiler)35 b(and)f(P)n(eter)g(A)n
(therton,)i(Hidden)f(surface)f(remo)n(v)-5 b(al)34 b(using)g(p)r
(olygon)g(area)436 2930 y(sorting,)f Fa(Pr)l(o)l(c.)i(of)g(the)g(4th)g
(ann.)f(c)l(onf.)h(on)g(c)l(omputer)f(gr)l(aphics)i(and)f(inter)l
(active)g(te)l(ch-)436 3030 y(niques,)30 b(1977)p Fg(,)g(pp.)e(214-222)
330 3196 y(5.)41 b(Kevin)27 b(W)-7 b(eiler,)28 b(P)n(olygon)e
(Comparison)g(using)h(a)h(Graph)f(Represen)n(tation,)g
Fa(SIGGRAPH)436 3296 y(80,)k(Computer)f(Gr)l(aphics)p
Fg(,)g Fc(14)p Fg(,)d(1980,)f(10-18)1788 5919 y(10)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
